{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/78/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"5d6b98ea-8b16-525e-8387-d1e356582adb","excerpt":"本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印 所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。 给定任意N…","html":"<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">*****\n ***\n  *\n ***\n*****</code></pre></div>\n<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>\n<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>\n<p>输入格式：</p>\n<p>输入在一行给出1个正整数N（&#x3C;=1000）和一个符号，中间以空格分隔。</p>\n<p>输出格式：</p>\n<p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入样例：\n19 *\n输出样例：\n*****\n ***\n  *\n ***\n*****\n2\n\n#include \"stdio.h\"\n#include \"math.h\"\n//#include \"algorithm\"\n//using namespace std;\nint main(){\n    int n;\n    char c;\n    scanf(\"%d %c\",&amp;n,&amp;c);\n    int bottom = (int)sqrt(2.0 * (n+1))-1;\n    if(bottom %2 == 0) bottom--;\n    int used = (bottom + 1)*(bottom + 1)/2 - 1;\n    //输出倒三角\n    for (int i = bottom; i >= 1; i -=2) {\n        for (int j = 0; j &lt; (bottom -i) / 2; j++) {\n            printf(\" \");\n        }\n        for (int j = 0; j &lt; i; j++) {\n            printf(\"%c\",c);\n        }\n        printf(\"\\n\");\n    }\n    //输出正三角\n    for (int i = 3; i &lt;= bottom; i +=2) {\n        for (int j = 0; j &lt; (bottom -i) / 2; j++) {\n            printf(\" \");\n        }\n        for (int j = 0; j &lt; i; j++) {\n            printf(\"%c\",c);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"%d\\n\",n - used);\n    return 0;\n}</code></pre></div>\n<p>个人认为从\n1=1^2\n1+3=2^2\n1+3+5=9=3^2\n可以得到1+3+5+7+…+(2n-1)=n^2\n再观察后得知空格数目是从n-n n-n+1 n-n+2这样下来的，于是用一个数组来代替（也可以不用）\n从而有下面这种</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include \"stdio.h\"\n\nint main(){\n    int N, n = 0,num[100010] = {0};\n    char c;\n    scanf(\"%d %c\", &amp;N, &amp;c);\n    while (2*n*n - 1 &lt;= N) n++;\n    n--;//修正\n    for (int i = 1; i &lt;= n; i++) {\n        num[i] = 2*i-1;\n    }\n    for (int i = n; i >= 1; i--) {\n        for (int k = 0; k &lt; n -i; k++) {\n            printf(\" \");\n        }\n        for (int j = 0; j &lt; num[i]; j++) {\n            printf(\"%c\", c);\n        }\n        printf(\"\\n\");\n    }\n    for (int i = 2; i &lt;= n; i++) {\n        for (int k = 0; k &lt; n - i; k++) {\n            printf(\" \");\n        }\n        for (int j = 0; j &lt; num[i]; j++) {\n            printf(\"%c\", c);\n        }\n        printf(\"\\n\");\n    }\n        printf(\"%d\\n\",N - (2*n*n - 1));\n\n    return 0;\n}</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT B1027","date":"February 03, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/77/"},"frontmatter":{"title":"PAT A1036"}},"next":{"fields":{"slug":"/old-posts/79/"},"frontmatter":{"title":"PAT A1031"}}},"pageContext":{"id":"5d6b98ea-8b16-525e-8387-d1e356582adb","previousPostId":"6caf4392-b11d-5d9e-a2b2-338eca51eb3a","nextPostId":"eb821ad4-d551-5388-a698-73141ffcdffc"}},
    "staticQueryHashes": ["2841359383","3257411868"]}