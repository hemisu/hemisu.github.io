{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/187/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"4a87650f-bf8e-5eb5-af60-35c0ed444bff","excerpt":"A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each…","html":"<p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&#x3C;=10000) which is the total number of books. Then N blocks follow, each contains the information of a book in 6 lines:</p>\n<p>Line #1: the 7-digit ID number;\nLine #2: the book title — a string of no more than 80 characters;\nLine #3: the author — a string of no more than 80 characters;\nLine #4: the key words — each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;\nLine #5: the publisher — a string of no more than 80 characters;\nLine #6: the published year — a 4-digit number which is in the range [1000, 3000].\nIt is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p>\n<p>After the book information, there is a line containing a positive integer M (&#x3C;=1000) which is the number of user’s search queries. Then M lines follow, each in one of the formats shown below:</p>\n<p>1: a book title\n2: name of an author\n3: a key word\n4: name of a publisher\n5: a 4-digit number representing the year\nOutput Specification:</p>\n<p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print “Not Found” instead.</p>\n<p>Sample Input:\n3\n1111111\nThe Testing Book\nYue Chen\ntest code debug sort keywords\nZUCS Print\n2011\n3333333\nAnother Testing Book\nYue Chen\ntest code sort keywords\nZUCS Print2\n2012\n2222222\nThe Testing Book\nCYLL\nkeywords debug book\nZUCS Print2\n2011\n6\n1: The Testing Book\n2: Yue Chen\n3: keywords\n4: ZUCS Print\n5: 2011\n3: blablabla\nSample Output:\n1: The Testing Book\n1111111\n2222222\n2: Yue Chen\n1111111\n3333333\n3: keywords\n1111111\n2222222\n3333333\n4: ZUCS Print\n1111111\n5: 2011\n1111111\n2222222\n3: blablabla\nNot Found</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"algorithm\"\n    //#include \"vector\"\n    #include \"set\"\n    #include \"map\"\n    using namespace std;\n    //typedef long long LL;\n    \n    //5个map变量分别建立书名、作者、关键词、出版社及出版年份与id的映射关系\n    map&lt;string, set&lt;int>> mpTitle, mpAuthor, mpKey, mpPub, mpYear;\n    \n    void query(map&lt;string,set&lt;int>> &amp;mp, string&amp; str){//在mp中查找str\n        if(mp.find(str) == mp.end()) printf(\"Not Found\\n\");//找不到\n        else{\n            //找到\n            for (set&lt;int>::iterator it = mp[str].begin(); it != mp[str].end(); it++) {\n                printf(\"%07d\\n\", *it);//输出str对应的所有id\n            }\n        }\n    }\n    \n    int main(){\n        int n, m, id, type;\n        string title, author, key, pub, year;\n        scanf(\"%d\", &amp;n);//书的数目\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d%*c\", &amp;id);\n            getline(cin, title);//书名\n            mpTitle[title].insert(id);//把id加入title对应的集合中\n            getline(cin, author);//读入\n            mpAuthor[author].insert(id);//把id加入author对应的集合中\n            while (cin >> key) {//每次读入一个关键词key\n                mpKey[key].insert(id);//把id加入key对应的集合中\n                int c = getchar();//接受关键字key后的字符\n                if (c == '\\n') {//如果是换行，说明关键字输入结束\n                    break;\n                }\n            }\n            getline(cin, pub);//出版社pub\n            mpPub[pub].insert(id);//把id加入pub对应的集合中\n            getline(cin,year);//出版日期year\n            mpYear[year].insert(id);//把id加入year对应的集合中\n        }\n        string temp;\n        scanf(\"%d\", &amp;m);//查询次数\n        for (int i = 0 ; i &lt; m; i++) {\n            scanf(\"%d: \", &amp;type);//查询类型\n            getline(cin,temp);//欲查询的字符串\n            cout &lt;&lt; type &lt;&lt; \": \" &lt;&lt; temp &lt;&lt; endl;//输出类型和字符串\n            if (type == 1) {\n                query(mpTitle, temp);\n            }else if (type == 2) {\n                query(mpAuthor, temp);\n            }else if (type == 3) {\n                query(mpKey, temp);\n            }else if (type == 4) {\n                query(mpPub, temp);\n            }else{\n                query(mpYear, temp);\n            }\n        }\n        return 0;\n    }</code></pre></div>\n<p>介绍map&#x3C;string,set<int>>用法：\nset元素插入采用的是insert函数，因此mp[“Name”].insert(id);\n遍历问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    for(set&lt;int>::iterator it = mp[\"Mike\"].begin(); it != mp[\"Mike\"].end() ; it++){\n        printf(\"%d\\n\", *it);\n    }</code></pre></div>\n<p>其他的如书名，作者，出版社及出版日期可以作为整体读入\n关键词读入的问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    while(cin >> key){\n        mpKey[key].insert(id);\n        char c = getchar();//读入一个词后的字符\n        if(c == '\\n') break;//如果是换行，跳出\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1022","date":"February 20, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/186/"},"frontmatter":{"title":"PAT A1071"}},"next":{"fields":{"slug":"/old-posts/191/"},"frontmatter":{"title":"PAT A1032"}}},"pageContext":{"id":"4a87650f-bf8e-5eb5-af60-35c0ed444bff","previousPostId":"754ecd91-4401-5d4b-9aa5-1a5fcb5af3c1","nextPostId":"4e29c056-b8b6-59d3-b1cf-35d26f56b8dc"}},
    "staticQueryHashes": ["2841359383","3257411868"]}