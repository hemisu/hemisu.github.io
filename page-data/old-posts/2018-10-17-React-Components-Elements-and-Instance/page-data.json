{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/2018-10-17-React-Components-Elements-and-Instance/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"1cd2496c-0ec9-5e07-a002-a91eafe5d997","excerpt":"在一次项目重构中，我将filter组件需要的、之类通过包裹后，通过这种形式当作参数传入。 大致的数据结构如下，component可以传入自定义组件或者直接传入这种形式； 在本地跑的时候，并没有发现问题；然后打包之后就发现跑不通，报错之类的错误； 打开sourcemap之后定位到这个n是rc-form…","html":"<p>在一次项目重构中，我将filter组件需要的<code class=\"language-text\">Input</code>、<code class=\"language-text\">Select</code>之类通过<code class=\"language-text\">Connect</code>包裹后，通过<code class=\"language-text\">&lt;MyFromItem /></code>这种形式当作参数传入。</p>\n<p>大致的数据结构如下，component可以传入自定义组件或者直接传入<code class=\"language-text\">&lt;Input /></code>这种形式；</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>StaffFormItem <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>在本地跑的时候，并没有发现问题；然后打包之后就发现跑不通，报错<code class=\"language-text\">n is not a function</code>之类的错误；</p>\n<p>打开sourcemap之后定位到这个n是rc-form中的getFieldDecorator函数，遂寻找这个值未传入的原因。</p>\n<p>调试了多次（打包实在是太慢了……），终于发现是判断类型的时候发生了问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 这里传入了&lt;StaffFormItem /></span>\n<span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> component<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token function\">swith</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Connect'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 判断受控组件</span>\n    <span class=\"token keyword\">return</span> <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>打包之后，这里的type会从<code class=\"language-text\">Connect</code>变为<code class=\"language-text\">n</code>, <code class=\"language-text\">j</code>这种混淆后的形式，万万没想到。</p>\n<p>解决问题之后去搜索了一下，出来了3个概念:</p>\n<ul>\n<li>\n<p>Components</p>\n</li>\n<li>\n<p>Component Instances</p>\n</li>\n<li>\n<p>Elements</p>\n</li>\n</ul>\n<p>在其他UI框架中的，一般只有模板（<code class=\"language-text\">Class</code>）和实例（<code class=\"language-text\">new Class()</code>）这样的概念；而在React中，<code class=\"language-text\">Component Instances</code>和<code class=\"language-text\">Elements</code>不是同一种类型的东西，它们之间没有一对一的关系；</p>\n<p>看下面一段代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这时候是Component Instance'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> another_element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这里是一个element'</span><span class=\"token punctuation\">,</span> another_element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> another_element<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是一个Component'</span><span class=\"token punctuation\">,</span> MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是一个element'</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上述这段代码，可以得出：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">MyComponent</code>(这个class自身)是一个Component</p>\n</li>\n<li>\n<p><code class=\"language-text\">element</code>是一个对象，但是它不是MyComponent的一个实例。它仅仅描述了一个对象实例(<code class=\"language-text\">Component Instance</code>)被创建了，它是一个拥有<code class=\"language-text\">key</code>、<code class=\"language-text\">props</code>、<code class=\"language-text\">ref</code>、<code class=\"language-text\">type</code>这些属性的一个对象。在这里，<code class=\"language-text\">key</code>和<code class=\"language-text\">ref</code>的值为<code class=\"language-text\">null</code>,<code class=\"language-text\">props</code>是一个空对象，<code class=\"language-text\">type</code>即为<code class=\"language-text\">MyComponent</code>字符串。</p>\n</li>\n<li>\n<p>一个<code class=\"language-text\">MyComponent</code>的实例将会在<code class=\"language-text\">element</code>被render之后被创建(在上述代码中，实例在构造函数中打印)</p>\n</li>\n<li>\n<p><code class=\"language-text\">anthor_element</code>也是一个对象，它的<code class=\"language-text\">key</code>、<code class=\"language-text\">props</code>、<code class=\"language-text\">ref</code>和上面所述的一样，但是它的<code class=\"language-text\">type</code>为<code class=\"language-text\">div</code></p>\n</li>\n</ul>\n<p>具体可以看<a href=\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\">React Components, Elements, and Instances</a></p>\n<p>总结一下，可以看出React官方对这几个概念的定义非常清楚：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">An element is a plain object describing a component instance or DOM node and its desired properties.</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">A ReactElement is a light, stateless, immutable, virtual representation of a DOM Element</code></p>\n</li>\n</ul>\n<p><code class=\"language-text\">Component</code>可以被用来创建一个<code class=\"language-text\">Instance</code>，当<code class=\"language-text\">Instance</code>被render之后就创建了一个<code class=\"language-text\">Element</code>。</p>\n<p>创建实例的过程不需要我们手动进行；\n多个Element可以描述同一个实例（比如<code class=\"language-text\">&lt;Parent /></code>组件的<code class=\"language-text\">render()</code>返回了<code class=\"language-text\">&lt;Child /></code>，每次触发<code class=\"language-text\">render</code>时都会返回一个新的<code class=\"language-text\">element</code>，但是已经存在<code class=\"language-text\">Child</code>实例可能被复用）；\n一个Elmenet也可以用于描述多个实例（比如把一个<code class=\"language-text\">element</code>存储到一个变量中<code class=\"language-text\">const a = &lt;Child /></code>,然后调用多次<code class=\"language-text\">&lt;div>{a} {a} {a}&lt;/div></code>）</p>","tableOfContents":"","frontmatter":{"title":"一次打包错误 引起的对 React Components, Elements, Instance三者的认识","date":"October 17, 2018","description":null}},"previous":{"fields":{"slug":"/old-posts/2018-09-04-bubble-demo/"},"frontmatter":{"title":"排序展示效果"}},"next":{"fields":{"slug":"/old-posts/javascript-concurrency-promise/"},"frontmatter":{"title":"js异步初探 - promise"}}},"pageContext":{"id":"1cd2496c-0ec9-5e07-a002-a91eafe5d997","previousPostId":"888ac77a-9f2e-5b79-8f1b-fa6eaf3b6357","nextPostId":"1c84bcf6-b47b-5bad-be30-31744e154099"}},
    "staticQueryHashes": ["2841359383","3257411868"]}