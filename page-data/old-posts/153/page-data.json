{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/153/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"cb2fe237-9c2d-535f-ab4b-076fac44f872","excerpt":"给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。 例如，我们从6767开始，将得到 7766 - 6677 = 108…","html":"<p>给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。</p>\n<p>例如，我们从6767开始，将得到</p>\n<p>7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\n… …</p>\n<p>现给定任意4位正整数，请编写程序演示到达黑洞的过程。</p>\n<p>输入格式：</p>\n<p>输入给出一个(0, 10000)区间内的正整数N。</p>\n<p>输出格式：</p>\n<p>如果N的4位数字全相等，则在一行内输出“N - N = 0000”；否则将计算的每一步在一行内输出，直到6174作为差出现，输出格式见样例。注意每个数字按4位数格式输出。</p>\n<p>输入样例1：\n6767\n输出样例1：\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n输入样例2：\n2222\n输出样例2：\n2222 - 2222 = 0000</p>\n<p>For any 4-digit integer except the ones with all the digits being the same, if we sort the digits in non-increasing order first, and then in non-decreasing order, a new number can be obtained by taking the second number from the first one. Repeat in this manner we will soon end up at the number 6174 — the “black hole” of 4-digit numbers. This number is named Kaprekar Constant.</p>\n<p>For example, start from 6767, we’ll get:</p>\n<p>7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\n… …</p>\n<p>Given any 4-digit number, you are supposed to illustrate the way it gets into the black hole.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case which gives a positive integer N in the range (0, 10000).</p>\n<p>Output Specification:</p>\n<p>If all the 4 digits of N are the same, print in one line the equation “N - N = 0000”. Else print each step of calculation in a line until 6174 comes out as the difference. All the numbers must be printed as 4-digit numbers.</p>\n<p>Sample Input 1:\n6767\nSample Output 1:\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\nSample Input 2:\n2222\nSample Output 2:\n2222 - 2222 = 0000</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"algorithm\"\n    #include \"string.h\"\n    using namespace std;\n    bool cmp (int a, int b){\n    \treturn a > b;\n    }\n    void to_array (int n, int num[]){\n    \tfor (int i = 0; i &lt; 4; i++) {\n    \t\tnum[i] = n % 10;\n    \t\tn /= 10;\n    \t}\n    }\n    int to_number (int num[]) {\n    \tint sum = 0;\n    \tfor (int i = 0; i &lt; 4; i++) {\n    \t\tsum = sum * 10 + num[i];\n    \t}\n    \treturn sum;\n    }\n    int main(){\n    \tint n, Min, Max;\n    \tscanf(\"%d\", &amp;n);\n    \tint num[5];\n    \twhile(1){\n    \t\tto_array(n, num);\n    \t\tsort(num , num + 4);//从小到大\n    \t\tMin = to_number(num);\n    \t\tsort(num , num + 4 ,cmp);//从大到小\n    \t\tMax = to_number(num);\n    \t\tn = Max - Min;\n    \t\tprintf(\"%04d - %04d = %04d\\n\", Max, Min, n);\n    \t\tif( n == 0 || n == 6174) break;\n    \t}\n    \treturn 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT B1019/A1069","date":"February 13, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/152/"},"frontmatter":{"title":"浙大提前查分"}},"next":{"fields":{"slug":"/old-posts/154/"},"frontmatter":{"title":"PAT B1013"}}},"pageContext":{"id":"cb2fe237-9c2d-535f-ab4b-076fac44f872","previousPostId":"cc09d02d-3368-54d2-8bbf-871a3beae888","nextPostId":"42f9db99-0466-53d0-877d-4a2d63d01d67"}},
    "staticQueryHashes": ["2841359383","3257411868"]}