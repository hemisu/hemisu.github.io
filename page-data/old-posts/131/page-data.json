{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/131/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"dc365f36-0cc0-5ae1-bb21-2401b546989c","excerpt":"With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on…","html":"<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax (&#x3C;= 100), the maximum capacity of the tank; D (&#x3C;=30000), the distance between Hangzhou and the destination city; Davg (&#x3C;=20), the average distance per unit gas that the car can run; and N (&#x3C;= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (&#x3C;=D), the distance between this station and Hangzhou, for i=1,…N. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print “The maximum travel distance = X” where X is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>\n<p>Sample Input 1:\n50 1300 12 8\n6.00 1250\n7.00 600\n7.00 150\n7.10 0\n7.20 200\n7.50 400\n7.30 1000\n6.85 300\nSample Output 1:\n749.17\nSample Input 2:\n50 1300 12 2\n7.10 0\n7.00 600\nSample Output 2:\nThe maximum travel distance = 1200.00</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    using namespace std;\n    const int maxn = 510;\n    const int INF = 1.0e9;\n    struct station{\n        double price, dis;//单价和离杭州的距离\n    }st[maxn];\n    bool cmp (station a, station b){\n        return a.dis &lt; b.dis;\n    }\n    int main(){\n        int n;\n        double Cmax, D, Davg;\n        scanf(\"%lf%lf%lf%d\", &amp;Cmax, &amp;D, &amp;Davg, &amp;n);\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%lf%lf\", &amp;st[i].price, &amp;st[i].dis);//各加油站距离\n        }\n        st[n].price = 0;\n        st[n].dis = D;\n        sort(st, st + n , cmp);\n        if (st[0].dis != 0) {\n            printf(\"The maximum travel distance = 0.00\\n\");//出发点没有加油站，无法出发\n        }else{\n            int now = 0;//当前所处的加油站编号\n            //总花费，当前油量 满油行驶距离\n            double ans = 0, nowTank = 0, MAX = Cmax * Davg;\n            while (now &lt; n) {\n                //每次循环将选出下一个需要到达的加油站\n                //选出从当前加油站满油能到达范围的第一个油价低于当前油价的加油站\n                //如果没有低于当前油价的加油站，则选择价格最低的那个\n                int k = -1;//油价最低的加油站编号\n                double priceMin = INF;//最低油价\n                for (int i = now + 1; i &lt;= n &amp;&amp; st[i].dis - st[now].dis &lt;= MAX; i++) {\n                    if (st[i].price &lt; priceMin) {\n                        priceMin = st[i].price;\n                        k = i;\n                        //找到了第一个油价低于当前油价的加油站，中断循环\n                        if (priceMin &lt; st[now].price) {\n                            break;\n                        }\n                    }\n                }\n                if (k == -1) {\n                    break;//满油无法到达下一个加油站，退出循环\n                }\n                //下面为能找到可到达的加油站k，计算转移花费\n                //need为从now到k所需要的油量\n                double need = (st[k].dis - st[now].dis) / Davg;\n                if (priceMin &lt; st[now].price) {//如果加油站k的油价低于当前油价\n                    //只买足够到达加油站k的油\n                    if (nowTank &lt; need) {//当前油量不足need\n                        ans += (need - nowTank) * st[now].price;//补足need\n                        nowTank = 0;//到达加油站k后油量变为0\n                    }else{\n                        nowTank -= need;//油量足够，直接到达加油站k\n                    }\n                }else{//如果加油站k的油价高于当前油价\n                    ans += (Cmax - nowTank) * st[now].price;//加满油\n                    nowTank = Cmax - need;//加满油后到达加油站k剩余\n                }\n                now = k;//到达加油站k\n            }\n            if (now == n){\n                //到达目的地\n                printf(\"%.2f\\n\", ans);\n            }else{\n                printf(\"The maximum travel distance = %.2f\\n\", st[now].dis + MAX);\n            }\n        }\n        return 0;\n    }</code></pre></div>\n<p>策略1：优先前往油价更低的加油站\n策略2：在没有更低油价的加油站时，往油价尽可能低的加油站\n合并在一起，就是在所有满油状态能到达的加油站中，选出油价最低的那个加油站，而一旦在枚举过程中找到了第一个油价低于当前油价的加油站，则退出循环，结束选择过程。</p>","tableOfContents":"","frontmatter":{"title":"PAT A1033","date":"February 11, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/130/"},"frontmatter":{"title":"PAT B1020/A1070"}},"next":{"fields":{"slug":"/old-posts/132/"},"frontmatter":{"title":"PAT A1037"}}},"pageContext":{"id":"dc365f36-0cc0-5ae1-bb21-2401b546989c","previousPostId":"6e349fd0-1c8e-5f9c-a486-4178a90f0237","nextPostId":"c17236d2-94aa-5b1d-afe4-2708043da35c"}},
    "staticQueryHashes": ["2841359383","3257411868"]}