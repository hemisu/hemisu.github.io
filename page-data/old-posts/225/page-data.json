{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/225/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"45f2bb18-32c7-5c16-ad36-a16a5a309499","excerpt":"Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is…","html":"<p>Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers: N (&#x3C;=1000), the number of users; and L (&#x3C;=6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:</p>\n<p>M[i] user_list[i]</p>\n<p>where M[i] (&#x3C;=100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that are followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.</p>\n<p>Then finally a positive K is given, followed by K UserID’s for query.</p>\n<p>Output Specification:</p>\n<p>For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.</p>\n<p>Sample Input:\n7 3\n3 2 3 4\n0\n2 5 6\n2 3 1\n2 3 4\n1 4\n1 5\n2 2 6\nSample Output:\n4\n5</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    #include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    #include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    const int MAXV = 1010;\n    struct Node{\n        int id;\n        int layer;\n    };\n    vector&lt;Node> Adj[MAXV];//邻接表\n    bool inq[MAXV] = {false};//顶点是否已被加入过队列\n    int BFS(int s, int L){//start为起始结点，L为层数上限\n        int numForward = 0;//转发数\n        queue&lt;Node> q;\n        Node start;\n        start.id = s;\n        start.layer = 0;\n        q.push(start);\n        inq[s] = true;\n        while (!q.empty()) {\n            Node topNode = q.front();\n            q.pop();\n            int u = topNode.id;\n            for (int i = 0; i &lt; Adj[u].size(); i++) {\n                Node next = Adj[u][i];//从u出发能到达的结点next\n                next.layer = topNode.layer + 1;//next的层号等于当前结点层号加1\n                //如果next的编号未被加入过队列，且next的层次不超过上限L\n                if (inq[next.id] == false &amp;&amp; next.layer &lt;= L) {\n                    q.push(next);\n                    inq[next.id] = true;\n                    numForward++;\n                }\n            }\n        }\n        return numForward;\n    }\n    \n    int main(){\n        Node user;\n        int n, L, numFollow, idFollow;\n        scanf(\"%d%d\", &amp;n, &amp;L);//结点个数，层数上限\n        for (int i = 1; i &lt;= n; i++) {\n            user.id = i;//用户编号为i\n            scanf(\"%d\", &amp;numFollow);//i用户关注的人数\n            for (int j = 1; j &lt;= numFollow; j++) {\n                scanf(\"%d\", &amp;idFollow);\n                Adj[idFollow].push_back(user);//idFollow->i 被i用户关注\n            }\n        }\n        int numQuery, s;\n        scanf(\"%d\", &amp;numQuery);\n        for (int i = 0; i &lt; numQuery; i++) {\n            memset(inq, false, sizeof(inq));//inq数组初始化\n            scanf(\"%d\", &amp;s);\n            int numForward = BFS(s, L);//BFS,返回转发数\n            printf(\"%d\\n\", numForward);//输出转发数\n        }\n        return 0;\n    }\n</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1076","date":"February 24, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/224/"},"frontmatter":{"title":"PAT A1034"}},"next":{"fields":{"slug":"/old-posts/226/"},"frontmatter":{"title":"PAT A1013"}}},"pageContext":{"id":"45f2bb18-32c7-5c16-ad36-a16a5a309499","previousPostId":"33a30b28-6891-583b-b7f0-adf21f278abd","nextPostId":"00638397-aea6-553d-b5f3-4a0ac204fc30"}},
    "staticQueryHashes": ["2841359383","3257411868"]}