{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/101/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"40914cbf-0a9b-54a2-ab5e-5447bc75f27c","excerpt":"The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflection of the speaker’s…","html":"<p>The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflection of the speaker’s personality. Such a preference is called “Kuchiguse” and is often exaggerated artistically in Anime and Manga. For example, the artificial sentence ending particle “nyan~” is often used as a stereotype for characters with a cat-like personality:</p>\n<p>Itai nyan~ (It hurts, nyan~)\nNinjin wa iyada nyan~ (I hate carrots, nyan~)\nNow given a few lines spoken by the same character, can you find her Kuchiguse?</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line is an integer N (2&#x3C;=N&#x3C;=100). Following are N file lines of 0~256 (inclusive) characters in length, each representing a character’s spoken line. The spoken lines are case sensitive.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the kuchiguse of the character, i.e., the longest common suffix of all N lines. If there is no such suffix, write “nai”.</p>\n<p>Sample Input 1:\n3\nItai nyan~\nNinjin wa iyadanyan~\nuhhh nyan~\nSample Output 1:\nnyan~\nSample Input 2:\n3\nItai!\nNinjinnwaiyada T_T\nT_T\nSample Output 2:\nnai</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include \"stdio.h\"\n//#include \"math.h\"\n#include \"string.h\"\n//#include \"algorithm\"\n//using namespace std;\nint n, minLen = 256, ans = 0;\nchar s[100][256];\nint main(){\n    scanf(\"%d\", &amp;n);\n    getchar();\n    for (int i = 0; i &lt; n; i++) {\n        gets(s[i]);\n        int len = (int)strlen(s[i]);\n        if (len &lt; minLen) {\n            minLen = len;\n        }\n        for (int j = 0; j &lt; len/2; j++) {\n            char temp = s[i][j];\n            s[i][j] = s[i][len - j -1];\n            s[i][len - j - 1] = temp;\n        }\n    }\n    for (int i = 0; i &lt; minLen; i++) {\n        char c = s[0][i];\n        bool same = true;\n        for (int j = 1; j &lt; n; j++) {\n            if (c != s[j][i]) {\n                same = false;\n                break;\n            }\n        }\n        if (same) ans++;\n        else break;\n    }\n    if (ans) {\n        for (int i = ans - 1; i >= 0; i--) {\n            printf(\"%c\", s[0][i]);\n        }\n    }else{\n        printf(\"nai\");\n    }\n    \n    return 0;\n}</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1077","date":"February 06, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/100/"},"frontmatter":{"title":"PAT A1035"}},"next":{"fields":{"slug":"/old-posts/102/"},"frontmatter":{"title":"PAT A1082"}}},"pageContext":{"id":"40914cbf-0a9b-54a2-ab5e-5447bc75f27c","previousPostId":"5012a881-a2ab-5575-a9cb-de4618b555b3","nextPostId":"77b8856d-d0b4-5706-8194-e5a2e5842a45"}},
    "staticQueryHashes": ["2841359383","3257411868"]}