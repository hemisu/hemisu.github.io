{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/140/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"258fbd8f-ba8e-5ee3-a2ef-7bd0119ce323","excerpt":"Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary…","html":"<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary number.</p>\n<p>Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:\nN1 N2 tag radix\nHere N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix.</p>\n<p>Sample Input 1:\n6 110 1 10\nSample Output 1:\n2\nSample Input 2:\n1 ab 1 2\nSample Output 2:\nImpossible</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    #include \"iostream\"\n    using namespace std;\n    typedef long long LL;\n    LL Map[256];\n    LL inf = (1LL &lt;&lt; 63) - 1;//long long的最大值2^63-1\n    void init(){\n        for (char c = '0'; c &lt;= '9'; c++) {\n            Map[c] = c - '0';\n        }\n        for (char c = 'a'; c &lt;= 'z'; c++) {\n            Map[c] = c - 'a' + 10;\n        }\n    }\n    LL convertNum10(char a[], LL radix, LL t){\n        LL ans = 0;\n        int len = strlen(a);\n        for (int i = 0; i &lt; len; i++) {\n            ans = ans * radix + Map[a[i]]; //进制转换\n            if(ans &lt; 0 || ans > t) return -1;//溢出或者超过N1的十进制\n        }\n        return ans;\n    }\n    int cmp(char N2[], LL radix,LL t){//N2的十进制与t比较\n        int len = strlen(N2);\n        LL num = convertNum10(N2, radix, t);//将N2转换为radix进制\n        if (num &lt; 0) return 1;//溢出，肯定是N2 > t\n        if (t > num) return  -1;//t较大，返回-1\n        else if(t == num) return 0;//相等，返回0\n        else return 1;//num较大，返回1\n    }\n    LL binarySearch(char N2[], LL left, LL right, LL t){\n        LL mid;\n        while (left &lt;= right) {\n            mid = (left + right)/2;\n            int flag = cmp(N2, mid, t);\n            if (flag == 0) return mid;\n            else if (flag == -1) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;//解不存在\n    }\n    int findLargestDigit(char N2[]){\n        int ans = -1, len = strlen(N2);\n        for (int i = 0; i &lt; len; i++) {\n            if (Map[N2[i]] > ans) {\n                ans = Map[N2[i]];\n            }\n        }\n        return ans+1;\n    }\n    char N1[20], N2[20], temp[20];\n    int tag,radix;\n    int main(){\n        init();\n        scanf(\"%s %s %d %d\", N1, N2, &amp;tag, &amp;radix);\n        if (tag == 2) {\n            strcpy(temp, N1);\n            strcpy(N1, N2);\n            strcpy(N2, temp);\n        }\n        LL t = convertNum10(N1, radix, inf);//将N1从radix进制转换为十进制\n        LL low = findLargestDigit(N2);//找到N2中数位最大的位+1，当成二分下界\n        LL high = max(low, t) + 1;//上界\n        LL ans = binarySearch(N2, low, high, t);\n        if (ans == -1) printf(\"Impossible\\n\");\n        else printf(\"%lld\\n\",ans);\n        return 0;\n    }\n</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1010","date":"February 12, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/136/"},"frontmatter":{"title":"PAT B1030/A1085"}},"next":{"fields":{"slug":"/old-posts/141/"},"frontmatter":{"title":"PAT A1044"}}},"pageContext":{"id":"258fbd8f-ba8e-5ee3-a2ef-7bd0119ce323","previousPostId":"6954ba78-1668-56c5-8591-0eb28e7eb333","nextPostId":"6563c8fb-1aa1-5e8c-b8fa-b3705f2a65e9"}},
    "staticQueryHashes": ["2841359383","3257411868"]}