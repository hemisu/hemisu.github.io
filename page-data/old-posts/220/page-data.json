{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/220/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"d1b1f874-469c-52bc-94f0-1436cdb3bd11","excerpt":"When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A “social cluster…","html":"<p>When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A “social cluster” is a set of people who have some of their hobbies in common. You are supposed to find all the clusters.</p>\n<p><strong>Input Specification:</strong></p>\n<p>Each input file contains one test case. For each test case, the first line contains a positive integer N (&#x3C;=1000), the total number of people in a social network. Hence the people are numbered from 1 to N. Then N lines follow, each gives the hobby list of a person in the format:</p>\n<p>Ki: hi[1] hi[2] … hi[Ki]</p>\n<p>where Ki (>0) is the number of hobbies, and hi[j] is the index of the j-th hobby, which is an integer in [1, 1000].</p>\n<p><strong>Output Specification:</strong></p>\n<p>For each case, print in one line the total number of clusters in the network. Then in the second line, print the numbers of people in the clusters in non-increasing order. The numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n<p><strong>Sample Input:</strong>\n8\n3: 2 7 10\n1: 4\n2: 5 3\n1: 4\n1: 3\n1: 4\n4: 6 8 1 5\n1: 4\n<strong>Sample Output:</strong>\n3\n4 3 1</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    //#include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    //#include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    const int maxn= 1010;\n    int father[maxn];//存放父亲结点\n    int isRoot[maxn] = {0};//记录每个结点是否作为某个集合的根结点\n    int course[maxn] = {0};//记录喜欢活动h的任意一个人的编号\n    int findFather(int x){//查找x所在集合的根节点\n        int a = x;\n        while (x != father[x]) {\n            x = father[x];\n        }\n        //路径压缩\n        while (a != father[a]) {\n            int z = a;\n            a = father[a];\n            father[z] = x;\n        }\n        return x;\n    }\n    void Union(int a, int b){//合并a和b所在的集合\n        int faA = findFather(a);\n        int faB = findFather(b);\n        if (faA != faB) {\n            father[faA] = faB;\n        }\n    }\n    void init(int n){//初始化father[i]为i，且isRoot[i]为false\n        for (int i = 1; i &lt;= n; i++) {\n            father[i] = i;\n            isRoot[i] = 0;\n        }\n    }\n    bool cmp(int a, int b){\n        return a > b;\n    }\n    int main(){\n        int n, k, h;\n        scanf(\"%d\", &amp;n);\n        init(n);\n        for (int i = 1; i &lt;= n; i++) {\n            scanf(\"%d:\", &amp;k);\n            for (int j = 0; j &lt; k; j++) {//对每个活动\n                scanf(\"%d\", &amp;h);\n                if (course[h] == 0) {//h活动第一次有人喜欢\n                    course[h] = i;//记录那个人的名字\n                }\n                Union(i, findFather(course[h]));//合并\n            }\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            isRoot[findFather(i)]++;\n        }\n        int ans = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            if (isRoot[i]) {\n                ans++;\n            }\n        }\n        printf(\"%d\\n\", ans);\n        sort(isRoot + 1, isRoot + n + 1, cmp);\n        for (int i = 1; i &lt;= ans; i++) {\n            printf(\"%d\", isRoot[i]);\n            if (i &lt; ans) {\n                printf(\" \");\n            }\n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1098 . Insertion or Heap Sort (25)","date":"February 24, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/219/"},"frontmatter":{"title":"PAT A1107 . Social Clusters"}},"next":{"fields":{"slug":"/old-posts/224/"},"frontmatter":{"title":"PAT A1034"}}},"pageContext":{"id":"d1b1f874-469c-52bc-94f0-1436cdb3bd11","previousPostId":"21f7fd8c-e969-5033-9033-99b8be6eff09","nextPostId":"33a30b28-6891-583b-b7f0-adf21f278abd"}},
    "staticQueryHashes": ["2841359383","3257411868"]}