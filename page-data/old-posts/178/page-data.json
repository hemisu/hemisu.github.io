{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/178/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"fb418a12-937f-51d3-97ba-ed3642178cea","excerpt":"If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as 0.123*105 with simple…","html":"<p>If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as 0.123*105 with simple chopping. Now given the number of significant digits on a machine and two float numbers, you are supposed to tell if they are treated equal in that machine.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case which gives three numbers N, A and B, where N (&#x3C;100) is the number of significant digits, and A and B are the two float numbers to be compared. Each float number is non-negative, no greater than 10100, and that its total digit number is less than 100.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in a line “YES” if the two numbers are treated equal, and then the number in the standard form “0.d1…dN*10^k” (d1>0 unless the number is 0); or “NO” if they are not treated equal, and then the two numbers in their standard form. All the terms must be separated by a space, with no extra space at the end of a line.</p>\n<p>Note: Simple chopping is assumed without rounding.</p>\n<p>Sample Input 1:\n3 12300 12358.9\nSample Output 1:\nYES 0.123<em>10^5\nSample Input 2:\n3 120 128\nSample Output 2:\nNO 0.120</em>10^3 0.128*10^3</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"algorithm\"\n    using namespace std;\n    //typedef long long LL;\n    int n;//有效位数\n    string deal(string s, int&amp; e){\n        int k = 0;//s的下标\n        while (s.length() > 0 &amp;&amp; s[0] == '0') {\n            s.erase(s.begin());//去掉s的前导0\n        }\n        if (s[0] == '.') {//去掉前导0后后是小数点，说明s是小于1的小数\n            s.erase(s.begin());//去掉小数点\n            while (s.length() > 0 &amp;&amp; s[0] == '0') {\n                s.erase(s.begin());//去掉小数点后非零位前的所有零\n                e--;\n            }\n        }else{//去掉前导零后不是小数点，则找到后面的小数点删除\n            while (k &lt; s.length() &amp;&amp; s[k] != '.') {//寻找小数点\n                k++;\n                e++;//只要不碰到小数点就让指数e++\n            }\n            if (k &lt; s.length()) {//while结束后k &lt; s.length()说明喷到了小数点\n                s.erase(s.begin() + k);//把小数点删除\n            }\n        }\n        if (s.length() == 0) {\n            e = 0;//如果去除前导零后s的长度变为0，说明这个数是0\n        }\n        int num = 0;\n        k = 0;\n        string res;\n        while (num &lt; n) {//只要精度还没有达到n\n            if (k &lt; s.length()) {\n                res += s[k++];//只要还有数字，就加到res末尾\n            }else{\n                res += '0';//否则res末尾添加0\n            }\n            num++;\n        }\n        return res;\n    }\n    int main(){\n        string s1, s2, s3, s4;\n        cin >> n >> s1 >> s2;\n        int e1 = 0, e2 = 0;//e1 e2为s1 s2的指数\n        s3 = deal(s1, e1);\n        s4 = deal(s2, e2);\n        if (s3 == s4 &amp;&amp; e1 == e2) {//主体相同且指数相同\n            cout&lt;&lt;\"YES 0.\"&lt;&lt; s3 &lt;&lt;\"*10^\"&lt;&lt; e1 &lt;&lt;endl;\n        }else{\n            cout&lt;&lt;\"NO 0.\"&lt;&lt; s3 &lt;&lt;\"*10^\"&lt;&lt; e1&lt;&lt;\" 0.\"&lt;&lt;s4 &lt;&lt;\"*10^\"&lt;&lt; e2 &lt;&lt;endl;\n        }\n        return 0;\n    }</code></pre></div>\n<p>没有找到问题中先导0</p>","tableOfContents":"","frontmatter":{"title":"PAT A1060","date":"February 18, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/177/"},"frontmatter":{"title":"PAT A1024"}},"next":{"fields":{"slug":"/old-posts/179/"},"frontmatter":{"title":"PAT A1039"}}},"pageContext":{"id":"fb418a12-937f-51d3-97ba-ed3642178cea","previousPostId":"11c8b926-7641-5fb4-b691-af97cd35f463","nextPostId":"cae8af7b-e4c4-5647-9d02-cd484e543a7c"}},
    "staticQueryHashes": ["2841359383","3257411868"]}