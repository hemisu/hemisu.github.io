{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/275/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"74946297-e196-5ccd-9968-a8120beabd0f","excerpt":"The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”. In this problem, you…","html":"<p>The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”.</p>\n<p>In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.</p>\n<p><strong>Input Specification:</strong></p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&#x3C; N &#x3C;= 200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format “Vertex1 Vertex2”, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:</p>\n<p>n V1 V2 … Vn</p>\n<p>where n is the number of vertices in the list, and Vi’s are the vertices on a path.</p>\n<p><strong>Output Specification:</strong></p>\n<p>For each query, print in a line “YES” if the path does form a Hamiltonian cycle, or “NO” if not.</p>\n<p><strong>Sample Input:</strong>\n6 10\n6 2\n3 4\n1 5\n2 5\n3 1\n4 1\n1 6\n6 3\n1 2\n4 5\n6\n7 5 1 4 3 6 2 5\n6 5 1 4 3 6 2\n9 6 2 1 6 3 4 5 2 6\n4 1 2 5 1\n7 6 1 3 4 5 2 6\n7 6 1 2 5 4 3 1\n<strong>Sample Output:</strong>\nYES\nNO\nNO\nNO\nYES\nNO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"algorithm\"\n    #include \"string.h\"\n    #include \"queue\"\n    #include \"vector\"\n    #include \"set\"\n    using namespace std;\n    const int maxv = 210;\n    const int INF = 1000000000;\n    int n, m, G[maxv][maxv];\n    bool vis[maxv] = {false};\n    \n    bool isConnet(int arr[],int n){\n      int u = arr[0];\n      for (int i = 1; i &lt; n; i++){\n        if(G[u][arr[i]] != 1) return false;\n        u = arr[i];\n      }\n      return true;\n    }\n    bool  isHamilt(int arr[],int n){\n      if(arr[0] != arr[n - 1]) return false;\n      int *times = new int[n];\n      for(int i = 0;i &lt; n ;i++)\n        times[i] = 0;\n      for(int i = 0;i &lt; n ;i++)\n        times[arr[i]] ++;\n      for(int i = 1;i &lt; n ;i++){\n        if(i == arr[0]){\n          if(times[i] != 2)\n            return false;\n        }else{\n          if(times[i] !=1)\n            return false;\n        }\n      }\n      return true;\n    }\n    \n    int main(){\n      scanf(\"%d%d\", &amp;n, &amp;m);\n      fill(G[0], G[0] + maxv * maxv, INF);\n      int u, v;\n      for (int i = 0; i &lt; m; i++){\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        G[u][v] = G[v][u] = 1;\n      }\n      int query, k;\n      scanf(\"%d\", &amp;query);\n      for  (int i = 0; i &lt; query; i++){\n        scanf(\"%d\", &amp;k);\n        int *arr = new int[k];\n        for(int j = 0; j &lt; k; j++){\n          scanf(\"%d\", &amp;arr[j]);\n        }\n        if(k == n + 1&amp;&amp;isHamilt(arr,k) &amp;&amp; isConnet(arr,k)){\n          printf(\"YES\\n\");\n        }else{\n          printf(\"NO\\n\");\n        }          \n      }\n      \n      return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1122 . Hamiltonian Cycle (25)","date":"March 07, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/274/"},"frontmatter":{"title":"PAT A1120 . Friend Numbers (20)"}},"next":{"fields":{"slug":"/old-posts/276/"},"frontmatter":{"title":"PAT A1105 . Spiral Matrix (25)"}}},"pageContext":{"id":"74946297-e196-5ccd-9968-a8120beabd0f","previousPostId":"a0c2aede-a258-5d82-a235-0e558dd2c181","nextPostId":"5b3eb8e2-a3df-5ff6-a0a1-3402981ca9ff"}},
    "staticQueryHashes": ["2841359383","3257411868"]}