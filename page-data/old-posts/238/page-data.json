{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/238/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"c17ef6bd-64e5-5632-85c3-ac9e0b53fabe","excerpt":"Given a sequence of K integers { N1, N2, …, NK }. A continuous subsequence is defined to be { Ni, Ni+1, …, Nj } where 1 <= i <= j <= K. The Maximum Subsequence…","html":"<p>Given a sequence of K integers { N<sub>1</sub>, N<sub>2</sub>, …, N<sub>K</sub> }. A continuous subsequence is defined to be { N<sub>i</sub>, N<sub>i+1</sub>, …, N<sub>j</sub> } where 1 &#x3C;= i &#x3C;= j &#x3C;= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (&#x3C;= 10000). The second line contains K numbers, separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n<p>Sample Input:\n10\n-10 1 2 3 4 -5 -23 3 7 -21\nSample Output:\n10 1 4</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    \n    const int maxn = 10010;\n    int a[maxn], dp[maxn];\n    int s[maxn] = {0};//s[i]表示dp[i]的连续序列从a的哪一个元素开始\n        \n    int main(){\n        int n;\n        scanf(\"%d\", &amp;n);\n        bool flag = false;//flag表示数组a中是否全小于0\n        for(int i = 0; i &lt; n; i++){\n            scanf(\"%d\", &amp;a[i]);\n            if (a[i] >= 0) flag = true;\n        }\n        if (flag == false) {//如果所有数字都小于0，则输出0以及尾首元素\n            printf(\"0 %d %d\\n\", a[0], a[n - 1]);\n            return 0;\n        }\n        //边界\n        dp[0] = a[0];\n        for (int i = 1; i &lt; n; i++) {\n            //状态转移方程\n            if (dp[i - 1] + a[i] > a[i]) {\n                dp[i] = dp[i - 1] + a[i];\n                s[i] = s[i - 1];\n            }else{\n                dp[i] = a[i];\n                s[i] = i;\n            }\n        }\n        //因为dp[i]存放的是以a[i]结尾的连续序列的最大和\n        //因此需要遍历i得到最大的才是结果\n        int k = 0;\n        for (int i = 1; i &lt; n; i++) {\n            if (dp[i] > dp[k]) {\n                k = i;\n            }\n        }\n        printf(\"%d %d %d\\n\", dp[k], a[s[k]], a[k]);\n        return 0;\n    }\n</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1007 . Maximum Subsequence Sum (25)","date":"February 27, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/237/"},"frontmatter":{"title":"PAT A1087"}},"next":{"fields":{"slug":"/old-posts/240/"},"frontmatter":{"title":"PAT A1045 . Favorite Color Stripe (30)"}}},"pageContext":{"id":"c17ef6bd-64e5-5632-85c3-ac9e0b53fabe","previousPostId":"1299150c-7883-54d3-aaba-552145566b40","nextPostId":"1ae444d7-00bc-578b-bcf4-ba3f0fc9dd54"}},
    "staticQueryHashes": ["2841359383","3257411868"]}