{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/160/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"12846439-4f81-51ba-9394-374d1f071c54","excerpt":"给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列{0.1, 0.2, 0.3, 0.4}，我们有(0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.…","html":"<p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列{0.1, 0.2, 0.3, 0.4}，我们有(0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这10个片段。</p>\n<p>给定正整数数列，求出全部片段包含的所有的数之和。如本例中10个片段总和是0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。</p>\n<p>输入格式：</p>\n<p>输入第一行给出一个不超过105的正整数N，表示数列中数的个数，第二行给出N个不超过1.0的正数，是数列中的数，其间以空格分隔。</p>\n<p>输出格式：</p>\n<p>在一行中输出该序列所有片段包含的数之和，精确到小数点后2位。</p>\n<p>输入样例：\n4\n0.1 0.2 0.3 0.4\n输出样例：\n5.00</p>\n<p>Given a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence {0.1, 0.2, 0.3, 0.4}, we have 10 segments: (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4).</p>\n<p>Now given a sequence, you are supposed to find the sum of all the numbers in all the segments. For the previous example, the sum of all the 10 segments is 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N, the size of the sequence which is no more than 105. The next line contains N positive numbers in the sequence, each no more than 1.0, separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the sum of all the numbers in all the segments, accurate up to 2 decimal places.</p>\n<p>Sample Input:\n4\n0.1 0.2 0.3 0.4\nSample Output:\n5.00</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    //#include \"iostream\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    int main(){\n        int n;\n        double v, ans = 0;\n        scanf(\"%d\", &amp;n);\n        for (int i = 1; i &lt;= n; i++) {\n            scanf(\"%lf\", &amp;v);\n            ans += v * i * (n + 1 - i);\n        }\n        printf(\"%.2f\", ans);\n        return 0;\n    }\n</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT B1049/A1104","date":"February 17, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/156/"},"frontmatter":{"title":"大整数四则运算"}},"next":{"fields":{"slug":"/old-posts/162/"},"frontmatter":{"title":"PAT A1008"}}},"pageContext":{"id":"12846439-4f81-51ba-9394-374d1f071c54","previousPostId":"eb896522-115b-56ff-8064-625ef29d06d6","nextPostId":"05782c17-ee2c-5631-be25-1d0dbc14110b"}},
    "staticQueryHashes": ["2841359383","3257411868"]}