{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/79/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"eb821ad4-d551-5388-a698-73141ffcdffc","excerpt":"Given any string of N (>=5) characters, you are asked to form the characters into the shape of U. For example, “helloworld” can be printed as: That is, the…","html":"<p>Given any string of N (>=5) characters, you are asked to form the characters into the shape of U. For example, “helloworld” can be printed as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">h  d\ne  l\nl  r\nlowo</code></pre></div>\n<p>That is, the characters must be printed in the original order, starting top-down from the left vertical line with n1 characters, then left to right along the bottom line with n2 characters, and finally bottom-up along the vertical line with n3 characters. And more, we would like U to be as squared as possible — that is, it must be satisfied that n1 = n3 = max { k| k &#x3C;= n2 for all 3 &#x3C;= n2 &#x3C;= N } with n1 + n2 + n3 - 2 = N.\nInput Specification:</p>\n<p>Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the input string in the shape of U as specified in the description.</p>\n<p>Sample Input:\nhelloworld!\nSample Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">h   !\ne   d\nl   l\nlowor</code></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include \"stdio.h\"\n//#include \"math.h\"\n#include \"string.h\"\n//#include \"algorithm\"\n//using namespace std;\nint main(){\n    int n;\n    char str[100],ans[50][50];\n    gets(str);\n    n = strlen(str);\n//    scanf(\"%d\",&amp;n);\n    int n1,n2,n3;\n    for (n2 = 0; n2 &lt; n; n2++) {\n        if ( (n-n2+2) %2 == 0) {\n            n1 = n3 = (n + 2 -n2)/2;\n            if (n2 >= n1) {\n                break;\n            }\n        }\n    }\n    //初始化\n    for (int i = 1; i &lt;= n1; i++) {\n        for (int j = 1; j &lt;= n2; j++) {\n            ans[i][j] = ' ';\n        }\n    }\n    int pos = 0;\n    for (int i = 1; i &lt;= n1; i++) {\n        ans[i][1] = str[pos++];\n    }\n    for (int j = 2; j &lt;= n2; j++) {\n        ans[n1][j] = str[pos++];\n    }\n    for (int i = n3 - 1; i >= 1; i--) {\n        ans[i][n2] = str[pos++];\n    }\n    for (int i = 1; i &lt;= n1; i++) {\n        for (int j = 1; j &lt;= n2; j++) {\n            printf(\"%c\",ans[i][j]);\n        }\n        printf(\"\\n\");\n    }\n//    printf(\"%d\",n1,n2);\n    \n    return 0;\n}</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1031","date":"February 03, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/78/"},"frontmatter":{"title":"PAT B1027"}},"next":{"fields":{"slug":"/old-posts/82/"},"frontmatter":{"title":"PAT B1037"}}},"pageContext":{"id":"eb821ad4-d551-5388-a698-73141ffcdffc","previousPostId":"5d6b98ea-8b16-525e-8387-d1e356582adb","nextPostId":"938cf474-3c21-58e2-8133-6048e8348fc0"}},
    "staticQueryHashes": ["2841359383","3257411868"]}