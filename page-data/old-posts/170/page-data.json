{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/170/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"b53164b1-8f27-5884-a1d5-b1e7ff249021","excerpt":"The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash…","html":"<p>The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash function is defined to be “H(key) = key % TSize” where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.</p>\n<p>Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains two positive numbers: MSize (&#x3C;=104) and N (&#x3C;=MSize) which are the user-defined table size and the number of input numbers, respectively. Then N distinct positive integers are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line. All the numbers in a line are separated by a space, and there must be no extra space at the end of the line. In case it is impossible to insert the number, print ”-” instead.</p>\n<p>Sample Input:\n4 4\n10 6 4 15\nSample Output:\n0 1 4 -</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    //#include \"string.h\"\n    //#include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"algorithm\"\n    using namespace std;\n    const int maxn = 1000001;\n    bool is_Prime(int n){\n        if (n &lt;= 1) {\n            return false;\n        }\n        int sqr = (int)sqrt(1.0 * n);\n        for (int i = 2; i &lt;= sqr; i++) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n    int num[10010];\n    bool hashTable[10010] = {0};\n    int main(){\n        int Msize, n, Tsize, a;\n        scanf(\"%d%d\", &amp;Msize, &amp;n);\n        Tsize = Msize;\n        //找到合适的Tsize\n        while (is_Prime(Tsize) != true) {\n            Tsize++;\n        }\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d\", &amp;a);\n            int M = a % Tsize;\n            if (hashTable[M] == false) {//未使用\n                hashTable[M] = true;\n                if (i == 0) printf(\"%d\", M);\n                else printf(\" %d\", M);\n            }else{//被占用\n                int step;//步长\n                for (step = 1; step &lt; Tsize; step++) {\n                    M = (a + step * step) % Tsize;//下一个检测值\n                    if (hashTable[M] == false) {//未使用\n                        hashTable[M] = true;\n                        if (i == 0) printf(\"%d\", M);\n                        else printf(\" %d\", M);\n                        break;//break不能忘，因为已经探查到了\n                    }\n                }\n                if (step >= Tsize) {\n                    //探查不到空位\n                    if(i > 0) printf(\" \");\n                    printf(\"-\");\n                }\n            \n            }\n            \n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1078","date":"February 17, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/169/"},"frontmatter":{"title":"PAT A1015"}},"next":{"fields":{"slug":"/old-posts/171/"},"frontmatter":{"title":"PAT A1096"}}},"pageContext":{"id":"b53164b1-8f27-5884-a1d5-b1e7ff249021","previousPostId":"a56adc8f-8cfd-5041-98e9-37804e50f5eb","nextPostId":"9fdf4107-fa5c-5061-b82f-d0393c7d111b"}},
    "staticQueryHashes": ["2841359383","3257411868"]}