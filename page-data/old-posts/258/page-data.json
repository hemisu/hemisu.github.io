{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/258/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"26f0129c-d16c-5b54-8152-e8dec5485848","excerpt":"An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they…","html":"<p>An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.</p>\n<p><img src=\"https://www.patest.cn/upload/mr_ohesevgnyny.jpg\" alt=\"请输入图片描述\">\n<img src=\"https://www.patest.cn/upload/mr_ohesfdbkaep.jpg\" alt=\"请输入图片描述\">\n<img src=\"https://www.patest.cn/upload/mr_oheseymzi13.jpg\" alt=\"请输入图片描述\">\n<img src=\"https://www.patest.cn/upload/mr_ohesfjddti2.jpg\" alt=\"请输入图片描述\"></p>\n<p>Now given a sequence of insertions, you are supposed to output the level-order traversal sequence of the resulting AVL tree, and to tell if it is a complete binary tree.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&#x3C;= 20). Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, insert the keys one by one into an initially empty AVL tree. Then first print in a line the level-order traversal sequence of the resulting AVL tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line. Then in the next line, print “YES” if the tree is complete, or “NO” if not.</p>\n<p>Sample Input 1:\n5\n88 70 61 63 65\nSample Output 1:\n70 63 88 61 65\nYES\nSample Input 2:\n8\n88 70 61 96 120 90 65 68\nSample Output 2:\n88 65 96 61 70 90 120 68\nNO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include &lt;stdio.h>\n    #include &lt;algorithm>\n    #include &lt;vector>\n    #include &lt;queue>\n    using namespace std;\n    vector&lt;int> layer;\n    \n    struct node{\n        int v,height;\n        int order;\n        node *lchild,*rchild;\n    };\n    node* newNode(int v){\n        node* Node = new node;\n        Node->v = v;\n        Node->height = 1;\n        Node->lchild = Node->rchild = NULL;\n        return Node;\n    }\n    int getHeight(node* root){\n        if(root == NULL) return 0;\n        return root->height;\n    }\n    int getBalanceFactor(node* root){\n        return getHeight(root->lchild)-getHeight(root->rchild);\n    }\n    void updateHeight(node* root){\n        root->height=max(getHeight(root->lchild),getHeight(root->rchild))+1;\n    }\n    void L(node* &amp;root){\n        node* temp = root->rchild;\n        root->rchild = temp->lchild;\n        temp->lchild = root;\n        updateHeight(root);\n        updateHeight(temp);\n        root = temp;\n    }\n    void R(node* &amp;root){\n        node* temp = root->lchild;\n        root->lchild = temp->rchild;\n        temp->rchild = root;\n        updateHeight(root);\n        updateHeight(temp);\n        root = temp;\n    }\n    void insert(node* &amp;root,int v){\n        if(root == NULL){\n            root = newNode(v);\n            return;\n        }\n        if(v &lt; root->v){\n            insert(root->lchild,v);\n            updateHeight(root);\n            if(getBalanceFactor(root) == 2){\n                if(getBalanceFactor(root->lchild) == 1){//LL\n                    R(root);\n                }\n                else if(getBalanceFactor(root->lchild) == -1){//LR\n                    L(root->lchild);\n                    R(root);\n                }\n            }\n        }\n        else{\n            insert(root->rchild,v);\n            updateHeight(root);\n            if(getBalanceFactor(root) == -2){\n                if(getBalanceFactor(root->rchild) == -1){//RR\n                    L(root);\n                }\n                else if(getBalanceFactor(root->rchild) == 1){//RL\n                    R(root->rchild);\n                    L(root);\n                }\n            }\n        }\n    }\n    node *last = new node;\n    void layerOrder(node* root,vector&lt;int> &amp;vi){\n        queue&lt;node*> q;\n        q.push(root);\n        root->order = 1;\n        while (!q.empty()) {\n            node* now = q.front();\n            last = now;\n            q.pop();\n            vi.push_back(now->v);\n            if (now->lchild != NULL) {\n                q.push(now->lchild);\n                now->lchild->order = 2 * now->order;\n            }\n            if (now->rchild != NULL) {\n                q.push(now->rchild);\n                now->rchild->order = 2 * now->order + 1;\n            }\n        }\n    }\n    int main(){\n        int n, temp;\n        scanf(\"%d\", &amp;n);\n        node* root = NULL;\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d\", &amp;temp);\n            insert(root, temp);\n        }\n        layerOrder(root, layer);\n        for (int i = 0; i &lt; n; i++) {\n            printf(\"%d\", layer[i]);\n            if (i &lt; n - 1) printf(\" \");\n            else printf(\"\\n\");\n        }\n        if (last->order == n) {\n            printf(\"YES\\n\");\n        }else{\n            printf(\"NO\\n\");\n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1123 . Is It a Complete AVL Tree (30)","date":"March 02, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/257/"},"frontmatter":{"title":"PAT A1119 . Pre- and Post-order Traversals (30)"}},"next":{"fields":{"slug":"/old-posts/260/"},"frontmatter":{"title":"PAT A1116 . Come on! Let's C (20)"}}},"pageContext":{"id":"26f0129c-d16c-5b54-8152-e8dec5485848","previousPostId":"7fd05190-793c-5d9a-a5eb-e889eff0ab76","nextPostId":"c9de0df9-88e0-5e22-9ba7-eab0e0e8fb0d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}