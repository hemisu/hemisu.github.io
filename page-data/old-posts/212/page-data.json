{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/212/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"83cf2b5c-ae4d-5be0-9687-eab7e449c8b5","excerpt":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains only nodes with keys…","html":"<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>\n<p>The left subtree of a node contains only nodes with keys less than the node’s key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node’s key.\nBoth the left and right subtrees must also be binary search trees.\nIf we swap the left and right subtrees of every node, then the resulting tree is called the Mirror Image of a BST.</p>\n<p>Now given a sequence of integer keys, you are supposed to tell if it is the preorder traversal sequence of a BST or the mirror image of a BST.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&#x3C;=1000). Then N integer keys are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, first print in a line “YES” if the sequence is the preorder traversal sequence of a BST or the mirror image of a BST, or “NO” if not. Then if the answer is “YES”, print in the next line the postorder traversal sequence of that tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p>\n<p>Sample Input 1:\n7\n8 6 5 7 10 8 11\nSample Output 1:\nYES\n5 7 6 8 11 10 8\nSample Input 2:\n7\n8 10 11 8 6 7 5\nSample Output 2:\nYES\n11 8 10 7 5 6 8\nSample Input 3:\n7\n8 6 8 5 10 9 11\nSample Output 3:\nNO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    //#include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    //#include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    struct node{\n        int data;\n        node *left, *right;\n    };\n    void insert(node* &amp;root, int data){\n        if (root == NULL) {//到达空结点时，即为需要插入的位置\n            root = new node;\n            root->data = data;\n            root->left = root->right = NULL;\n            return;\n        }\n        if (data &lt; root->data) {\n            insert(root->left, data);\n        }else{\n            insert(root->right, data);\n        }\n    }\n    void preOrder(node* root, vector&lt;int>&amp;vi){//先序遍历，结果存在vi\n        if (root == NULL) return;\n        vi.push_back(root->data);\n        preOrder(root->left, vi);\n        preOrder(root->right, vi);\n    }\n    void preOrderMirror(node* root, vector&lt;int>&amp;vi){\n        if (root == NULL) return;\n        vi.push_back(root->data);\n        preOrderMirror(root->right, vi);\n        preOrderMirror(root->left, vi);\n    }\n    void postOrder(node* root, vector&lt;int>&amp;vi){\n        if (root == NULL) return;\n        postOrder(root->left, vi);\n        postOrder(root->right, vi);\n        vi.push_back(root->data);\n    }\n    void postOrderMirror(node* root, vector&lt;int>&amp;vi){\n        if (root == NULL) return;\n        postOrderMirror(root->right, vi);\n        postOrderMirror(root->left, vi);\n        vi.push_back(root->data);\n    }\n    //origin存放初始序列\n    //pre、post为先序、后序，preM、postM为镜像先序，后序\n    vector&lt;int> origin, pre, post, preM, postM;\n    int main(){\n        int n, data;\n        node* root = NULL;\n        scanf(\"%d\", &amp;n);\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d\", &amp;data);\n            origin.push_back(data);\n            insert(root, data);\n        }\n        preOrder(root, pre);\n        preOrderMirror(root, preM);\n        postOrder(root, post);\n        postOrderMirror(root, postM);\n        if (origin == pre) {\n            printf(\"YES\\n\");\n            for (int i = 0; i &lt; post.size(); i++) {\n                printf(\"%d\", post[i]);\n                if (i &lt; post.size() - 1) printf(\" \");\n            }\n        }else if(origin == preM){\n            printf(\"YES\\n\");\n            for (int i = 0; i &lt; postM.size(); i++) {\n                printf(\"%d\", postM[i]);\n                if (i &lt; postM.size() - 1) printf(\" \");\n            }\n        }else{\n            printf(\"NO\\n\");\n        }\n        return 0;\n    }\n</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1043","date":"February 23, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/211/"},"frontmatter":{"title":"PAT A1004"}},"next":{"fields":{"slug":"/old-posts/213/"},"frontmatter":{"title":"PAT A1064"}}},"pageContext":{"id":"83cf2b5c-ae4d-5be0-9687-eab7e449c8b5","previousPostId":"e79047c7-9f08-5e85-b369-efafe4c409ee","nextPostId":"b279f812-5b46-500b-91c4-0f34a2506e25"}},
    "staticQueryHashes": ["2841359383","3257411868"]}