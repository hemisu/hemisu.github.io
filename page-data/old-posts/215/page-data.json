{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/215/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"eef3aea4-4d88-59f1-9abf-9c346dcbee8f","excerpt":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains only nodes with keys…","html":"<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>\n<p>The left subtree of a node contains only nodes with keys less than the node’s key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node’s key.\nBoth the left and right subtrees must also be binary search trees.\nGiven the structure of a binary tree and a sequence of distinct integer keys, there is only one way to fill these keys into the tree so that the resulting tree satisfies the definition of a BST. You are supposed to output the level order traversal sequence of that tree. The sample is illustrated by Figure 1 and 2.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N (&#x3C;=100) which is the total number of nodes in the tree. The next N lines each contains the left and the right children of a node in the format “left_index right_index”, provided that the nodes are numbered from 0 to N-1, and 0 is always the root. If one child is missing, then -1 will represent the NULL child pointer. Finally N distinct integer keys are given in the last line.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the level order traversal sequence of that tree. All the numbers must be separated by a space, with no extra space at the end of the line.</p>\n<p>Sample Input:\n9\n1 6\n2 3\n-1 -1\n-1 4\n5 -1\n-1 -1\n7 -1\n-1 8\n-1 -1\n73 45 11 58 82 25 67 38 42\nSample Output:\n58 25 82 11 38 67 45 73 42</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    //#include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    //#include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    const int maxn = 110;\n    int n;\n    struct node{\n        int data;\n        int left, right;\n    }Node[maxn];\n    int number[maxn], num = 0;\n    void inOrder(int root){\n        if (root == -1) {\n            return;\n        }\n        inOrder(Node[root].left);\n        Node[root].data = number[num++];\n        inOrder(Node[root].right);\n    }\n    void levelOrder(int root){\n        queue&lt;int> q;\n        q.push(root);\n        num = 0;\n        while (!q.empty()) {\n            int now = q.front();\n            q.pop();\n            num++;\n            printf(\"%d\", Node[now].data);\n            if (num &lt; n) {\n                printf(\" \");\n            }\n            if (Node[now].left != -1) {\n                q.push(Node[now].left);\n            }\n            if (Node[now].right != -1) {\n                q.push(Node[now].right);\n            }\n        }\n    }\n    int main(){\n        scanf(\"%d\", &amp;n);\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d %d\", &amp;Node[i].left, &amp;Node[i].right);\n        }\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d\", &amp;number[i]);\n        }\n        sort(number, number + n);//从小到大排序\n        inOrder(0);\n        levelOrder(0);\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1099","date":"February 23, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/213/"},"frontmatter":{"title":"PAT A1064"}},"next":{"fields":{"slug":"/old-posts/216/"},"frontmatter":{"title":"PAT A1066"}}},"pageContext":{"id":"eef3aea4-4d88-59f1-9abf-9c346dcbee8f","previousPostId":"b279f812-5b46-500b-91c4-0f34a2506e25","nextPostId":"aac54947-12b1-511f-b49d-a0bcbcc39aec"}},
    "staticQueryHashes": ["2841359383","3257411868"]}