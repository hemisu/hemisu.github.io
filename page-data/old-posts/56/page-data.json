{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/56/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"d3e298ff-ac41-5cbb-a916-5c5c4f734e8b","excerpt":"给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字： A1 = 能被5整除的数字中所有偶数的和； A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…； A3 = 被5除后余2的数字的个数； A4 = 被5除后余3的数字的平均数，精确到小数点后1位； A5 = 被5除后余…","html":"<p>给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：</p>\n<ul>\n<li>A1 = 能被5整除的数字中所有偶数的和；</li>\n<li>A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…；</li>\n<li>A3 = 被5除后余2的数字的个数；</li>\n<li>A4 = 被5除后余3的数字的平均数，精确到小数点后1位；</li>\n<li>A5 = 被5除后余4的数字中最大数字。</li>\n</ul>\n<p>输入格式：</p>\n<p>每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。</p>\n<p>输出格式：</p>\n<p>对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>\n<p>若其中某一类数字不存在，则在相应位置输出“N”。</p>\n<p>输入样例1：\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n输出样例1：\n30 11 2 9.7 9\n输入样例2：\n8 1 2 4 5 6 7 9 16\n输出样例2：\nN 11 2 N 9</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include &lt;stdio.h>\nint main() {\n    int count[5] = {0};\n    int ans[5] = {0};\n    int n, temp;\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;temp);//读入数字\n        switch (temp % 5) {\n            case 0:\n                if (temp % 2 == 0) {\n                    ans[0] += temp;\n                    count[0]++;\n                }\n                break;\n            case 1:\n                if (count[1] %2 ==0) {\n                    ans[1] += temp;\n                }else{\n                    ans[1] -= temp;\n                }\n                count[1]++;\n                break;\n            case 2:\n                count[2]++;\n                break;\n            case 3:\n                ans[3] += temp;\n                count[3]++;\n                break;\n            case 4:\n                if(temp> ans[4]){\n                    ans[4] = temp;\n                    count[4]++;\n                }\n                break;\n            default:\n                break;\n        }//switch\n    }\n    if (count[0]) {\n        printf(\"%d \",ans[0]);\n    }else{\n        printf(\"N \");\n    }\n    if (count[1]) {\n        printf(\"%d \",ans[1]);\n    }else{\n        printf(\"N \");\n    }\n    if (count[2]) {\n        printf(\"%d \",count[2]);\n    }else{\n        printf(\"N \");\n    }\n    if (count[3]) {\n        printf(\"%.1f \",(double)ans[3]/count[3]);\n    }else{\n        printf(\"N \");\n    }\n    if (count[4]) {\n        printf(\"%d\",ans[4]);\n    }else{\n        printf(\"N\");\n    }\n    return 0;\n}</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT B1012","date":"January 17, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/54/"},"frontmatter":{"title":"PAT B1008"}},"next":{"fields":{"slug":"/old-posts/58/"},"frontmatter":{"title":"PAT B1018"}}},"pageContext":{"id":"d3e298ff-ac41-5cbb-a916-5c5c4f734e8b","previousPostId":"4a67cafb-bd4d-5d37-b4df-7b0a56228d9b","nextPostId":"2a670321-a4b9-574d-aa3b-88d5363b6b22"}},
    "staticQueryHashes": ["2841359383","3257411868"]}