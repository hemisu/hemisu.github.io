{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/200/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"3b912a9b-64d7-5214-95f1-6a8d21ed4c14","excerpt":"One important factor to identify acute stroke (急性脑卒中) is the volume of the stroke core. Given the results of image analysis in which the core regions are…","html":"<p>One important factor to identify acute stroke (急性脑卒中) is the volume of the stroke core. Given the results of image analysis in which the core regions are identified in each MRI slice, your job is to calculate the volume of the stroke core.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 4 positive integers: M, N, L and T, where M and N are the sizes of each slice (i.e. pixels of a slice are in an M by N matrix, and the maximum resolution is 1286 by 128); L (&#x3C;=60) is the number of slices of a brain; and T is the integer threshold (i.e. if the volume of a connected core is less than T, then that core must not be counted).</p>\n<p>Then L slices are given. Each slice is represented by an M by N matrix of 0’s and 1’s, where 1 represents a pixel of stroke, and 0 means normal. Since the thickness of a slice is a constant, we only have to count the number of 1’s to obtain the volume. However, there might be several separated core regions in a brain, and only those with their volumes no less than T are counted. Two pixels are “connected” and hence belong to the same region if they share a common side, as shown by Figure 1 where all the 6 red pixels are connected to the blue one.</p>\n<p><img src=\"https://www.patest.cn/upload/g0_nf8qpnrr0f1.jpg\" alt=\"请输入图片描述\">\nFigure 1\nOutput Specification:</p>\n<p>For each case, output in a line the total volume of the stroke core.</p>\n<p>Sample Input:\n3 4 5 2\n1 1 1 1\n1 1 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 1 0 0\n0 0 0 0\n1 0 1 1\n0 0 0 0\n0 0 0 0\n0 0 0 1\n0 0 0 1\n1 0 0 0\nSample Output:\n26</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    //#include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    //#include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    struct Node{\n        int x, y, z;//位置(x, y, z)\n    } node;\n    int n, m, slice, T;//矩阵为n*m,共有slice层，T为卒中核心区1的个数的下限\n    int pixel[1290][130][61];//三维01矩阵\n    bool inq[1290][130][61] = {false};//记录位置(x, y, z)是否入过队\n    int X[6] = {0, 0, 0, 0, 1, -1};\n    int Y[6] = {0, 0, 1, -1, 0, 0};\n    int Z[6] = {1, -1, 0, 0, 0, 0};\n    \n    bool Judge(int x, int y, int z){//判断(x, y, z)是否需要访问\n        //越界返回false\n        if (x >= n || x &lt; 0 || y >= m || y &lt; 0 || z >= slice || z &lt; 0) return false;\n        //若当前位置为0或者已经入过队,则返回false\n        if (pixel[x][y][z] == 0 ||inq[x][y][z] == true) return false;\n        //以上都不满足，返回true\n        return true;\n    }\n    //bfs函数访问位置(x, y, z)所在的块，将该块中所有\"1\"的inq都设置为true\n    int BFS(int x, int y, int z){\n        int tot = 0;//当前块中1的个数\n        queue&lt;Node> Q;//将结点node入队\n        node.x = x, node.y = y, node.z = z;//结点node的位置为(x, y, z)\n        Q.push(node);//将结点node入队\n        inq[x][y][z] = true;//设置位置(x, y, z)已入过队\n        while (!Q.empty()) {\n            Node top = Q.front();//取出队首元素\n            Q.pop();//队首出队\n            tot++;\n            for (int i = 0; i &lt; 6; i++) {//循环6次，得到6个方向\n                int newX = top.x + X[i];\n                int newY = top.y + Y[i];\n                int newZ = top.z + Z[i];\n                if(Judge(newX, newY, newZ)){//新位置(newX, newY, newZ)需要访问\n                    //设置node坐标\n                    node.x = newX, node.y = newY, node.z = newZ;\n                    Q.push(node);//将结点node入队\n                    inq[newX][newY][newZ] = true;//设置(newX, newY, newZ)已入过队\n                    \n                }\n            }\n        }\n        if (tot >= T) {\n            return tot;\n        }else{\n            return 0;\n        }\n    }\n    \n    int main(){\n        scanf(\"%d%d%d%d\", &amp;n, &amp;m, &amp;slice, &amp;T);\n        for (int z = 0; z &lt; slice; z++) {\n            for (int x = 0; x &lt; n; x++) {\n                for (int y = 0; y &lt; m; y++) {\n                    scanf(\"%d\", &amp;pixel[x][y][z]);\n                }\n            }\n        }\n        int ans = 0;//记录卒中核心区中1的个数总和\n        for (int z = 0; z &lt; slice; z++) {\n            for (int x = 0; x &lt; n; x++) {\n                for (int y = 0; y &lt; m; y++) {\n                    //如果当前位置为1，且未被访问，则BFS当前块\n                    if (pixel[x][y][z] == 1 &amp;&amp; inq[x][y][z] == false) {\n                        ans += BFS(x, y, z);\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\", ans);\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1091","date":"February 22, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/199/"},"frontmatter":{"title":"PAT A1103"}},"next":{"fields":{"slug":"/old-posts/201/"},"frontmatter":{"title":"PAT A1020"}}},"pageContext":{"id":"3b912a9b-64d7-5214-95f1-6a8d21ed4c14","previousPostId":"6a9cf91f-9e6f-5669-926a-425f683ed9c9","nextPostId":"2638c14c-d271-548e-aee1-b9d804202df1"}},
    "staticQueryHashes": ["2841359383","3257411868"]}