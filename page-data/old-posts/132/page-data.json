{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/132/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"c17236d2-94aa-5b1d-afe4-2708043da35c","excerpt":"The magic shop in Mars is offering some magic coupons. Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may…","html":"<p>The magic shop in Mars is offering some magic coupons. Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back! What is more, the shop also offers some bonus product for free. However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!</p>\n<p>For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M$) where a negative value corresponds to a bonus product. You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back. On the other hand, if you apply coupon 3 to product 4, you will have to pay M$12 to the shop.</p>\n<p>Each coupon and each product may be selected at most once. Your task is to get as much money back as possible.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers. Then the next line contains the number of products NP, followed by a line with NP product values. Here 1&#x3C;= NC, NP &#x3C;= 105, and it is guaranteed that all the numbers will not exceed 230.</p>\n<p>Output Specification:</p>\n<p>For each test case, simply print in a line the maximum amount of money you can get back.</p>\n<p>Sample Input:\n4\n1 2 4 -1\n4\n7 6 -2 -3\nSample Output:\n43</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    using namespace std;\n    const int maxn = 100010;\n    int coupon[maxn], products[maxn];\n    int main(){\n        int n, m;\n        scanf(\"%d\", &amp;n);\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d\", &amp;coupon[i]);\n        }\n        scanf(\"%d\", &amp;m);\n        for (int i = 0; i &lt; m; i++) {\n            scanf(\"%d\", &amp;products[i]);\n        }\n        sort(coupon, coupon + n);\n        sort(products, products + m);\n        int i = 0, j, ans = 0;\n        while (i &lt; n &amp;&amp; i &lt; m &amp;&amp; coupon[i] &lt; 0 &amp;&amp; products[i] &lt; 0) {\n            ans += coupon[i] * products[i];\n            i++;\n        }\n        i = n - 1;\n        j = m - 1;\n        while (i >= 0 &amp;&amp; j >= 0 &amp;&amp; coupon[i] > 0 &amp;&amp; products[j] >0) {\n            ans += coupon[i] * products[j];\n            i--;j--;\n        }\n        printf(\"%d\\n\",ans);\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1037","date":"February 11, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/131/"},"frontmatter":{"title":"PAT A1033"}},"next":{"fields":{"slug":"/old-posts/133/"},"frontmatter":{"title":"PAT A1067"}}},"pageContext":{"id":"c17236d2-94aa-5b1d-afe4-2708043da35c","previousPostId":"dc365f36-0cc0-5ae1-bb21-2401b546989c","nextPostId":"7b000fb6-5dd5-58a7-b8fa-421e35dcab42"}},
    "staticQueryHashes": ["2841359383","3257411868"]}