{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/118/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"c6d0acaf-367d-5019-8fca-8a349f483a48","excerpt":"旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。 输入格式： 输入在2行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过80个字符的串，由字母A-Z（包括大、小写）、数字0-9、以及下划线“…","html":"<p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。</p>\n<p>输入格式：</p>\n<p>输入在2行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过80个字符的串，由字母A-Z（包括大、小写）、数字0-9、以及下划线“_”（代表空格）组成。题目保证2个字符串均非空。</p>\n<p>输出格式：</p>\n<p>按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有1个坏键。</p>\n<p>输入样例：\n7_This_is_a_test\n_hs_s_a_es\n输出样例：\n7TI</p>\n<p>On a broken keyboard, some of the keys are worn out. So when you type some sentences, the characters corresponding to those keys will not appear on screen.</p>\n<p>Now given a string that you are supposed to type, and the string that you actually type out, please list those keys which are for sure worn out.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the 1st line contains the original string, and the 2nd line contains the typed-out string. Each string contains no more than 80 characters which are either English letters [A-Z] (case insensitive), digital numbers [0-9], or ”_” (representing the space). It is guaranteed that both strings are non-empty.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the keys that are worn out, in the order of being detected. The English letters must be capitalized. Each worn out key must be printed once only. It is guaranteed that there is at least one worn out key.</p>\n<p>Sample Input:\n7_This_is_a_test\n_hs_s_a_es\nSample Output:\n7TI</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    using namespace std;\n    int main(){\n        char str1[100], str2[100];\n        bool Hashtable[128] = {false};\n        scanf(\"%s%s\", str1,str2);\n        int len1 = (int)strlen(str1);\n        int len2 = (int)strlen(str2);\n        for (int i = 0 ; i &lt; len1; i++) {\n            int j;\n            char c1, c2;\n            for (j = 0; j &lt; len2; j++) {\n                c1 = str1[i];\n                c2 = str2[j];\n                if (c1 >= 'a' &amp;&amp; c1 &lt;= 'z') {\n                    c1 -= 32;//如果是小写字母，转化为大写\n                }\n                if (c2 >= 'a' &amp;&amp; c2 &lt;= 'z') {\n                    c2 -= 32;\n                }\n                if (c1 == c2) {\n                    break;\n                }\n            }\n            if (j == len2 &amp;&amp; Hashtable[c1] == false) {\n                printf(\"%c\" , c1);//c1不在str2中且没有被输出过\n                Hashtable[c1] = true;\n            }\n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT B1029/A1084","date":"February 10, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/117/"},"frontmatter":{"title":"PAT A1080"}},"next":{"fields":{"slug":"/old-posts/119/"},"frontmatter":{"title":"PAT B1033"}}},"pageContext":{"id":"c6d0acaf-367d-5019-8fca-8a349f483a48","previousPostId":"aa6e2bf7-c6e6-50c6-8443-57faa13c0a3e","nextPostId":"ee3af457-3c15-598a-956c-848cb17611f5"}},
    "staticQueryHashes": ["2841359383","3257411868"]}