{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/123/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"fea1495b-c16e-5931-b246-c7d9e87b31e6","excerpt":"给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按“PATestPATest…”这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按PATest的顺序打印，直到所有字符都被输出。 输入格式： 输入在一行中给出一个长度不超过1000…","html":"<p>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按“PATestPATest…”这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按PATest的顺序打印，直到所有字符都被输出。</p>\n<p>输入格式：</p>\n<p>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</p>\n<p>输出格式：</p>\n<p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p>\n<p>输入样例：\nredlesPayBestPATTopTeePHPereatitAPPT\n输出样例：\nPATestPATestPTetPTePePee</p>\n<p>瓜皮代码先来一份：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    //#include \"algorithm\"\n    //using namespace std;\n    char str[10010];\n    int hashTable[6] = {0};//PATest\n    char map[6] = {'P', 'A', 'T', 'e', 's', 't'};\n    int main(){\n        gets(str);\n        int len = (int)strlen(str);\n        for (int i = 0; i &lt; len; i++) {\n            switch (str[i]) {\n                case 'P':\n                    hashTable[0]++;\n                    break;\n                case 'A':\n                    hashTable[1]++;\n                    break;\n                case 'T':\n                    hashTable[2]++;\n                    break;\n                case 'e':\n                    hashTable[3]++;\n                    break;\n                case 's':\n                    hashTable[4]++;\n                    break;\n                case 't':\n                    hashTable[5]++;\n                    break;\n                default:\n                    break;\n            }\n        }\n        int k = 0;//最大的数\n        for (int i = 0; i &lt; 6; i++) {\n            if (hashTable[i] > hashTable[k]) {\n                k = i;\n            }\n        }\n        int num = hashTable[k];\n        for (int i = 0; i &lt; num; i++) {\n            for (int j = 0; j &lt; 6; j++) {\n                if (hashTable[j]) {\n                    printf(\"%c\",map[j]);\n                    hashTable[j]--;\n                }\n            }\n        }\n        return 0;\n    }</code></pre></div>\n<p>再来个优化后的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    //#include \"algorithm\"\n    //using namespace std;\n    char str[10010];\n    int hashTable[6] = {0};//PATest\n    char map[6] = {'P', 'A', 'T', 'e', 's', 't'};\n    int main(){\n        gets(str);\n        int len = (int)strlen(str), sum;//sum需要输出的字符数\n        for (int i = 0; i &lt; len; i++) {\n            for (int j = 0; j &lt; 6; j++) {\n                if (str[i] == map[j]) {\n                    hashTable[j]++;\n                    sum++;\n                }\n            }\n        }\n        \n        while (sum){\n            for (int j = 0; j &lt; 6; j++) {\n                if (hashTable[j]) {\n                    printf(\"%c\",map[j]);\n                    hashTable[j]--;\n                    sum--;\n                }\n            }\n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1043","date":"February 10, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/122/"},"frontmatter":{"title":"PAT B1042"}},"next":{"fields":{"slug":"/old-posts/124/"},"frontmatter":{"title":"PAT A1041"}}},"pageContext":{"id":"fea1495b-c16e-5931-b246-c7d9e87b31e6","previousPostId":"c513fe39-df28-5b32-a1d8-4fbdc48d9a15","nextPostId":"bad7eb11-94d7-549a-9922-90a0618620eb"}},
    "staticQueryHashes": ["2841359383","3257411868"]}