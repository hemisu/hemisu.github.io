{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/226/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"00638397-aea6-553d-b5f3-4a0ac204fc30","excerpt":"It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are…","html":"<p>It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly.</p>\n<p>For example, if we have 3 cities and 2 highways connecting city1-city2 and city1-city3. Then if city1 is occupied by the enemy, we must have 1 highway repaired, that is the highway city2-city3.</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 3 numbers N (&#x3C;1000), M and K, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then M lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to N. Finally there is a line containing K numbers, which represent the cities we concern.</p>\n<p>Output</p>\n<p>For each of the K cities, output in a line the number of highways need to be repaired if that city is lost.</p>\n<p>Sample Input\n3 2 3\n1 2\n1 3\n1 2 3\nSample Output\n1\n0\n0</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    #include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    #include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    const int N = 1111;\n    vector&lt;int> G[N];//邻接表\n    bool vis[N];//标记顶点i是否已经被访问\n    int currentPoint;\n    //dfs遍历v所在的连通块\n    void dfs(int v){\n        if (v == currentPoint)  return;\n        vis[v] = true;//v点被访问\n        for (int i = 0; i &lt; G[v].size(); i++) {\n            if (vis[G[v][i]] == false) {//如果顶点G[v][i]未被访问\n                dfs(G[v][i]);\n            }\n        }\n    }\n    \n    \n    int n, m, k;\n    int main(){\n        scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k);\n        for (int i = 0; i &lt; m; i++) {\n            int a, b;\n            scanf(\"%d%d\", &amp;a, &amp;b);//输入边的两个结点\n            G[a].push_back(b);\n            G[b].push_back(a);\n        }\n        for (int query = 0; query &lt; k; query++) {\n            scanf(\"%d\", &amp;currentPoint);//欲删除的顶点编号\n            memset(vis, false, sizeof(vis));\n            int block = 0;\n            for (int i = 1; i &lt;= n; i++) {//枚举每个顶点\n                if (i != currentPoint &amp;&amp; vis[i] == false) {//如果未被删除且未被访问\n                    dfs(i);\n                    block++;\n                }\n            }\n            printf(\"%d\\n\", block - 1);\n        }\n        return 0;\n    }\n</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1013","date":"February 24, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/225/"},"frontmatter":{"title":"PAT A1076"}},"next":{"fields":{"slug":"/old-posts/227/"},"frontmatter":{"title":"PAT A1021"}}},"pageContext":{"id":"00638397-aea6-553d-b5f3-4a0ac204fc30","previousPostId":"45f2bb18-32c7-5c16-ad36-a16a5a309499","nextPostId":"1266d35f-e566-5ba3-8483-7b8f9574e988"}},
    "staticQueryHashes": ["2841359383","3257411868"]}