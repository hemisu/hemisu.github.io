{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/114/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"7d9c1389-4947-53f9-a1f3-b3ec9c6499cb","excerpt":"Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supposed to simulate…","html":"<p>Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supposed to simulate this job, but concentrate only on the people in a certain range of ages. That is, given the net worths of N people, you must find the M richest people in a given range of their ages.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers: N (&#x3C;=105) - the total number of people, and K (&#x3C;=103) - the number of queries. Then N lines follow, each contains the name (string of no more than 8 characters without space), age (integer in (0, 200]), and the net worth (integer in [-106, 106]) of a person. Finally there are K lines of queries, each contains three positive integers: M (&#x3C;= 100) - the maximum number of outputs, and [Amin, Amax] which are the range of ages. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each query, first print in a line “Case #X:” where X is the query number starting from 1. Then output the M richest people with their ages in the range [Amin, Amax]. Each person’s information occupies a line, in the format</p>\n<p>Name Age Net_Worth\nThe outputs must be in non-increasing order of the net worths. In case there are equal worths, it must be in non-decreasing order of the ages. If both worths and ages are the same, then the output must be in non-decreasing alphabetical order of the names. It is guaranteed that there is no two persons share all the same of the three pieces of information. In case no one is found, output “None”.\nSample Input:\n12 4\nZoe_Bill 35 2333\nBob_Volk 24 5888\nAnny_Cin 95 999999\nWilliams 30 -22\nCindy 76 76000\nAlice 18 88888\nJoe_Mike 32 3222\nMichael 5 300000\nRosemary 40 5888\nDobby 24 5888\nBilly 24 5888\nNobody 5 0\n4 15 45\n4 30 35\n4 5 95\n1 45 50\nSample Output:\nCase #1:\nAlice 18 88888\nBilly 24 5888\nBob_Volk 24 5888\nDobby 24 5888\nCase #2:\nJoe_Mike 32 3222\nZoe_Bill 35 2333\nWilliams 30 -22\nCase #3:\nAnny_Cin 95 999999\nMichael 5 300000\nAlice 18 88888\nCindy 76 76000\nCase #4:\nNone</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    using namespace std;\n    struct person{\n        char name[10];\n        int age;\n        int worth;\n    }ps[100010],valid[100010];\n    int age[100010] = {0};\n    bool cmp (person a, person b){\n        if (a.worth != b.worth) {\n            return a.worth > b.worth;\n        }else if(a.age != b.age){\n            return a.age &lt; b .age;\n        }else{\n            return strcmp(a.name, b.name) &lt; 0;\n        }\n    }\n    int main(){\n        int n, k;\n        scanf(\"%d%d\", &amp;n, &amp;k);\n        for (int i = 0 ; i &lt; n ; i++) {\n            scanf(\"%s%d%d\", ps[i].name, &amp;ps[i].age, &amp;ps[i].worth);\n        }\n        sort(ps, ps + n, cmp);\n        int validnum = 0;//预处理 每个年龄不超过100人\n        for (int i = 0 ; i &lt; n ; i++) {\n            if (age[ps[i].age] &lt; 100) {\n                age[ps[i].age]++;\n                valid[validnum++] = ps[i];\n            }\n        }\n        int m, agelow, agehigh;\n        for (int i = 1 ; i &lt;= k ; i++) {\n            scanf(\"%d%d%d\", &amp;m, &amp;agelow, &amp;agehigh);\n            printf(\"Case #%d:\\n\", i);\n            int printnum = 0;\n            for (int j = 0 ; j &lt; validnum &amp;&amp; printnum &lt; m; j++) {\n                if (valid[j].age >= agelow &amp;&amp; valid[j].age &lt;= agehigh) {\n                    printf(\"%s %d %d\\n\",valid[j].name, valid[j].age, valid[j].worth);\n                    printnum++;\n                }\n            }\n            if (printnum == 0) {\n                printf(\"None\\n\");\n            }\n        }\n        return 0;\n    }</code></pre></div>\n<p>本题需要进行预处理，同年龄的超过100人就不用再记录到新的数组中了，减少时间复杂度。</p>","tableOfContents":"","frontmatter":{"title":"PAT A1055","date":"February 09, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/113/"},"frontmatter":{"title":"PAT A1028"}},"next":{"fields":{"slug":"/old-posts/115/"},"frontmatter":{"title":"PAT A1075"}}},"pageContext":{"id":"7d9c1389-4947-53f9-a1f3-b3ec9c6499cb","previousPostId":"a148318b-ee3a-5dae-9e52-4454d3476348","nextPostId":"97eece80-71c0-5e43-b989-f8e9bd22e8c5"}},
    "staticQueryHashes": ["2841359383","3257411868"]}