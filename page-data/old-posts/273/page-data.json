{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/273/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"4d756940-074a-5f3a-b401-8d38d277c6f6","excerpt":"“Damn Single (单身狗)” is the Chinese nickname for someone who is being single. You are supposed to find those who are alone in a big party, so they can be taken…","html":"<p>“Damn Single (单身狗)” is the Chinese nickname for someone who is being single. You are supposed to find those who are alone in a big party, so they can be taken care of.</p>\n<p><strong>Input Specification:</strong></p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N (&#x3C;=50000), the total number of couples. Then N lines of the couples follow, each gives a couple of ID’s which are 5-digit numbers (i.e. from 00000 to 99999). After the list of couples, there is a positive integer M (&#x3C;=10000) followed by M ID’s of the party guests. The numbers are separated by spaces. It is guaranteed that nobody is having bigamous marriage (重婚) or dangling with more than one companion.</p>\n<p><strong>Output Specification:</strong></p>\n<p>First print in a line the total number of lonely guests. Then in the next line, print their ID’s in increasing order. The numbers must be separated by exactly 1 space, and there must be no extra space at the end of the line.</p>\n<p><strong>Sample Input:</strong>\n3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333\n<strong>Sample Output:</strong>\n5\n10000 23333 44444 55555 88888</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include &lt;cstdio>\n    #include &lt;set>\n    #include &lt;vector>\n    using namespace std;\n    int main() {\n        int n, a, b, m;\n        scanf(\"%d\", &amp;n);\n        vector&lt;int> couple(100000);\n        for (int i = 0; i &lt; 100000; i++)\n            couple[i] = -1;\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;a, &amp;b);\n            couple[a] = b;\n            couple[b] = a;\n        }\n        scanf(\"%d\", &amp;m);\n        vector&lt;int> guest(m), isExist(100000);\n        for (int i = 0; i &lt; m; i++) {\n            scanf(\"%d\", &amp;guest[i]);\n            if (couple[guest[i]] != -1) {\n                isExist[couple[guest[i]]] = 1;\n            }\n        }\n        set&lt;int> s;\n        for (int i = 0; i &lt; m; i++) {\n            if (!isExist[guest[i]]) {\n                s.insert(guest[i]);\n            }\n        }\n        printf(\"%d\\n\", s.size());\n        for (set&lt;int>::iterator it = s.begin(); it != s.end(); it++) {\n            if (it != s.begin())\n                printf(\" \");\n            printf(\"%05d\", *it);\n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1121 . Damn Single (25)","date":"March 07, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/272/"},"frontmatter":{"title":"PAT A1127 . ZigZagging on a Tree (30)"}},"next":{"fields":{"slug":"/old-posts/274/"},"frontmatter":{"title":"PAT A1120 . Friend Numbers (20)"}}},"pageContext":{"id":"4d756940-074a-5f3a-b401-8d38d277c6f6","previousPostId":"be82f293-ed90-59b0-8620-8306b8d1ef3c","nextPostId":"a0c2aede-a258-5d82-a235-0e558dd2c181"}},
    "staticQueryHashes": ["2841359383","3257411868"]}