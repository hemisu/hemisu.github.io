{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/107/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"ab79a920-87d6-597d-859a-7dc1a766ee60","excerpt":"To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics…","html":"<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algebra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks — that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p>\n<p>For example, The grades of C, M, E and A - Average of 4 students are given as the following:</p>\n<p>StudentID  C  M  E  A\n310101     98 85 88 90\n310102     70 95 88 84\n310103     82 87 94 88\n310104     91 91 91 91\nThen the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (&#x3C;=2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID.</p>\n<p>Output</p>\n<p>For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p>\n<p>The priorities of the ranking methods are ordered as A > C > M > E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p>\n<p>If a student is not on the grading list, simply output “N/A”.</p>\n<p>Sample Input\n5 6\n310101 98 85 88\n310102 70 95 88\n310103 82 87 94\n310104 91 91 91\n310105 85 90 90\n310101\n310102\n310103\n310104\n310105\n999999\nSample Output\n1 C\n1 M\n1 E\n1 A\n3 A\nN/A</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    using namespace std;\n    struct person{\n        int id;\n        int grade[4];//grade[0]:A grade[1]:C grade[2]:M grade[3]:E\n    }stu[2010];\n    \n    char course[4] = {'A', 'C', 'M', 'E'};\n    int Rank[1000000][4] = {0};\n    int now;//cmp函数中使用，表示当前按now号分数排序stu数组\n    \n    bool cmp(person a, person b){\n        return a.grade[now] > b.grade[now];\n    }\n    \n    int main(){\n        int n, m;\n        scanf(\"%d%d\", &amp;n, &amp;m);\n        //读入分数\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%d%d%d%d\", &amp;stu[i].id, &amp;stu[i].grade[1], &amp;stu[i].grade[2], &amp;stu[i].grade[3]);\n            stu[i].grade[0] = stu[i].grade[1] + stu[i].grade[2] + stu[i].grade[3];\n        }\n        for (now = 0; now &lt;=3; now++) {\n            sort(stu, stu + n, cmp);//按照A C M E 分别排序\n            Rank[stu[0].id][now] = 1;\n            for (int i = 1; i &lt; n; i++) {\n                //若与前一位考生分数相同\n                if(stu[i].grade[now] == stu[i - 1].grade[now]){\n                    Rank[stu[i].id][now] = Rank[stu[i - 1].id][now];\n                }else{\n                    Rank[stu[i].id][now] = i + 1;\n                }\n            }\n        }\n        int query;\n        for (int i = 0; i &lt; m; i++) {\n            scanf(\"%d\", &amp;query);\n            if (Rank[query][0] == 0) {\n                printf(\"N/A\\n\");\n            }else{\n                int k = 0;\n                for (int j = 0; j &lt; 4; j++) {\n                    if(Rank[query][j] &lt; Rank[query][k]) k = j;\n                }\n                printf(\"%d %c\\n\",Rank[query][k] ,course[k]);\n            }\n        }\n        return 0;\n    }</code></pre></div>\n<p>收获：\n优先级为A>C>M>E,所以考虑设置数组时就按这个顺序：\n即0对应A,1对应C,2对应M,3对应E；\n并且编写CMP函数的时候可以按照这个编号来排序。\n另外，本题没有明示平均分是否需要取整以及取整方式，并且没有输出平均分，可以考虑用三门课总分代替，不用除以3。</p>","tableOfContents":"","frontmatter":{"title":"PAT A1012","date":"February 08, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/105/"},"frontmatter":{"title":"PAT B1015/A1062"}},"next":{"fields":{"slug":"/old-posts/109/"},"frontmatter":{"title":"PAT A1016"}}},"pageContext":{"id":"ab79a920-87d6-597d-859a-7dc1a766ee60","previousPostId":"301fe89d-a4dd-5ace-a409-7aff4cf5c8df","nextPostId":"f2d7f954-3d31-5e54-bcbb-bb0d7c8cc4b5"}},
    "staticQueryHashes": ["2841359383","3257411868"]}