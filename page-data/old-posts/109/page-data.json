{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/109/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"f2d7f954-3d31-5e54-bcbb-bb0d7c8cc4b5","excerpt":"A long-distance telephone company charges its customers by the following rules: Making a long-distance call costs a certain amount per minute, depending on the…","html":"<p>A long-distance telephone company charges its customers by the following rules:</p>\n<p>Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p>\n<p>The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p>\n<p>The next line contains a positive number N (&#x3C;= 1000), followed by N lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (mm:dd:hh:mm), and the word “on-line” or “off-line”.</p>\n<p>For each test case, all dates will be within a single month. Each “on-line” record is paired with the chronologically next record for the same customer provided it is an “off-line” record. Any “on-line” records that are not paired with an “off-line” record are ignored, as are “off-line” records not paired with an “on-line” record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p>\n<p>Output Specification:</p>\n<p>For each test case, you must print a phone bill for each customer.</p>\n<p>Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (dd:hh:mm), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p>\n<p>Sample Input:\n10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 10\n10\nCYLL 01:01:06:01 on-line\nCYLL 01:28:16:05 off-line\nCYJJ 01:01:07:00 off-line\nCYLL 01:01:08:03 off-line\nCYJJ 01:01:05:59 on-line\naaa 01:01:01:03 on-line\naaa 01:02:00:01 on-line\nCYLL 01:28:15:41 on-line\naaa 01:05:02:24 on-line\naaa 01:04:23:59 off-line\nSample Output:\nCYJJ 01\n01:05:59 01:07:00 61 $12.10\nTotal amount: $12.10\nCYLL 01\n01:06:01 01:08:03 122 $24.40\n28:15:41 28:16:05 24 $3.85\nTotal amount: $28.25\naaa 01\n02:00:01 04:23:59 4318 $638.80\nTotal amount: $638.80</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    //#include \"math.h\"\n    #include \"string.h\"\n    #include \"algorithm\"\n    using namespace std;\n    const int maxn = 1010;\n    int toll[25] = {0};//资费\n    struct Record{\n        char name[25];\n        int month, d, h, m;\n        bool status;\n    }rec[maxn], temp;\n    bool cmp(Record a,Record b){\n        int s = strcmp(a.name, b.name);\n        if (s != 0) return s &lt; 0;\n        else if (a.month != b.month) return a.month &lt; b.month;\n        else if (a.d != b.d) return a.d &lt; b.d;\n        else if (a.h != b.h) return a.h &lt; b.h;\n        else return a.m &lt; b.m;\n    }\n    void get_ans(int on, int off, int&amp; time, int&amp; money){\n        temp = rec[on];\n        while (temp.d &lt; rec[off].d || temp.h &lt; rec[off].h || temp.m &lt; rec[off].m) {\n            time++;\n            money += toll[temp.h];\n            temp.m++;\n            if (temp.m >= 60) {\n                temp.m = 0;\n                temp.h++;\n            }\n            if (temp.h >= 24) {\n                temp.h = 0;\n                temp.d++;\n            }\n        }\n    }\n    int main(){\n        for (int i = 0; i &lt; 24; i++) {\n            scanf(\"%d\", &amp;toll[i]);\n        }\n        int n;\n        scanf(\"%d\", &amp;n);\n        char line[10];\n        for (int i = 0; i &lt; n; i++) {\n            scanf(\"%s\", rec[i].name);\n            scanf(\"%d:%d:%d:%d\", &amp;rec[i].month, &amp;rec[i].d, &amp;rec[i].h, &amp;rec[i].m);\n            scanf(\"%s\", line);\n            if (strcmp(line, \"on-line\") == 0) {\n                rec[i].status = true;\n            }else{\n                rec[i].status = false;\n            }\n        }\n        sort(rec, rec + n, cmp);\n        int on = 0, off, next;\n        while (on &lt; n) {\n            int needPrint = 0;//是否需要输出 1表示找到on 2表示找到off\n            next = on;\n            while (next &lt; n &amp;&amp; strcmp(rec[next].name, rec[on].name) == 0) {\n                if (needPrint == 0 &amp;&amp; rec[next].status == true) {\n                    needPrint = 1;\n                }else if (needPrint == 1 &amp;&amp; rec[next].status == false){\n                    needPrint = 2;\n                }\n                next++;\n            }\n            if (needPrint &lt; 2) {//没有找到配对的on-off\n                on = next;\n                continue;\n            }\n            int AllMoney = 0;\n            printf(\"%s %02d\\n\", rec[on].name, rec[on].month);\n            while (on &lt; next) {\n                while (on &lt; next - 1\n                       &amp;&amp; !(rec[on].status == true &amp;&amp; rec[on + 1].status == false)\n                       ) {\n                    on++;\n                }\n                off = on + 1;\n                if (off == next) {\n                    on = next;\n                    break;\n                }\n                printf(\"%02d:%02d:%02d \", rec[on].d, rec[on].h, rec[on].m);\n                printf(\"%02d:%02d:%02d \", rec[off].d, rec[off].h, rec[off].m);\n                int time = 0, money = 0;\n                get_ans(on, off, time, money);\n                AllMoney += money;\n                printf(\"%d $%.2f\\n\", time, money / 100.0);\n                on = off + 1;//完成一个配对，从off+1开始下一对\n            }\n            printf(\"Total amount: $%.2f\\n\", AllMoney / 100.0);\n        }\n        \n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1016","date":"February 08, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/107/"},"frontmatter":{"title":"PAT A1012"}},"next":{"fields":{"slug":"/old-posts/110/"},"frontmatter":{"title":"PAT A1025"}}},"pageContext":{"id":"f2d7f954-3d31-5e54-bcbb-bb0d7c8cc4b5","previousPostId":"ab79a920-87d6-597d-859a-7dc1a766ee60","nextPostId":"1b8a064c-d10d-5bec-80ce-50e960f8ddaf"}},
    "staticQueryHashes": ["2841359383","3257411868"]}