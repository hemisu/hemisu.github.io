{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/43/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"d3cdbe41-1245-56af-b425-be47923d78f7","excerpt":"","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include &lt;stdio.h>\n//#include &lt;string.h>\n//#include &lt;algorithm>\n//using namespace std;\nconst int maxn = 4;\nint n,\nP[maxn],\nhashTable[maxn] = {false};\nvoid generateP(int index){\n    if(index == n + 1) {\n        for (int i = 1; i &lt;= n; i++) {\n            printf(\"%d\", P[i]);\n        }\n        printf(\"\\n\");\n        return;\n    }\n    for (int x = 1; x &lt;= n; x++) {\n        if(hashTable[x] == false){\n            P[index] = x;\n            hashTable[x] = true;\n            generateP(index + 1);\n            hashTable[x] = false;\n        }\n    }\n}\nint main(){\n    n = 3;\n    generateP(1);\n    return 0;\n}</code></pre></div>","tableOfContents":"","frontmatter":{"title":"递归应用 全排列","date":"January 15, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/41/"},"frontmatter":{"title":"PAT B1003"}},"next":{"fields":{"slug":"/old-posts/45/"},"frontmatter":{"title":"PAT B1004"}}},"pageContext":{"id":"d3cdbe41-1245-56af-b425-be47923d78f7","previousPostId":"2cadfbce-7bfb-5f00-9f25-2e3c29bb56d2","nextPostId":"a256bdca-a5f1-5317-99b6-808cd1b3778c"}},
    "staticQueryHashes": ["2841359383","3257411868"]}