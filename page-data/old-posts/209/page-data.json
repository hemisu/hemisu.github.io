{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/209/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"9def27c9-95d9-5508-8de7-b711746cbec4","excerpt":"A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is to find the…","html":"<p>A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is to find the generation with the largest population.</p>\n<p><strong>Input Specification:</strong></p>\n<p>Each input file contains one test case. Each case starts with two positive integers N (&#x3C;100) which is the total number of family members in the tree (and hence assume that all the members are numbered from 01 to N), and M (&#x3C;N) which is the number of family members who have children. Then M lines follow, each contains the information of a family member in the following format:</p>\n<p>ID K ID[1] ID[2] … ID[K]</p>\n<p>where ID is a two-digit number representing a family member, K (>0) is the number of his/her children, followed by a sequence of two-digit ID’s of his/her children. For the sake of simplicity, let us fix the root ID to be 01. All the numbers in a line are separated by a space.</p>\n<p><strong>Output Specification:</strong></p>\n<p>For each test case, print in one line the largest population number and the level of the corresponding generation. It is assumed that such a generation is unique, and the root level is defined to be 1.</p>\n<p><strong>Sample Input:</strong>\n23 13\n21 1 23\n01 4 03 02 04 05\n03 3 06 07 08\n06 2 12 13\n13 1 21\n08 2 15 16\n02 2 09 10\n11 2 19 20\n17 1 22\n05 1 11\n07 1 14\n09 1 17\n10 1 18\n<strong>Sample Output:</strong>\n9 4</p>\n<p>下面写了DFS和BFS两种做法，选择一项即可</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    //#include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    //#include \"set\"\n    //#include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    //typedef long long LL;\n    const int maxn = 110;\n    int n, m;\n    struct node{\n        vector&lt;int> child;\n        int level;\n    }Node[maxn];\n    int hashTable[maxn] = {0};\n    void BFS(int root){\n        queue&lt;int> q;\n        Node[root].level = 1;\n        q.push(root);\n        while (!q.empty()) {\n            int now = q.front();\n            q.pop();\n            hashTable[Node[now].level]++;\n            for (int i = 0; i &lt; Node[now].child.size(); i++) {\n                q.push(Node[now].child[i]);\n                Node[Node[now].child[i]].level = Node[now].level + 1;\n            }\n        }\n    }\n    void DFS(int index, int depth){\n        hashTable[depth]++;\n        for (int j = 0; j &lt; Node[index].child.size(); j++) {\n            DFS(Node[index].child[j], depth + 1);\n        }\n    }\n    \n    int main(){\n        scanf(\"%d %d\", &amp;n, &amp;m);\n        for (int i = 0 ; i &lt; m; i++) {\n            int id, k;\n            scanf(\"%d%d\", &amp;id, &amp;k);\n            for (int j = 0; j &lt; k; j++) {\n                int child;\n                scanf(\"%d\", &amp;child);\n                Node[id].child.push_back(child);\n            }\n        }\n    //    BFS(1);\n        DFS(1, 1);\n        int maxk, maxnum = 0;\n        for (int i = 0; i &lt; maxn; i++) {\n            if (hashTable[i] > maxnum) {\n                maxnum = hashTable[i];\n                maxk = i;\n            }\n        }\n        printf(\"%d %d\", maxnum, maxk);\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1094","date":"February 23, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/208/"},"frontmatter":{"title":"PAT A1090"}},"next":{"fields":{"slug":"/old-posts/210/"},"frontmatter":{"title":"PAT A1106"}}},"pageContext":{"id":"9def27c9-95d9-5508-8de7-b711746cbec4","previousPostId":"47124dee-fb8f-5cab-9b98-6a20a9109a34","nextPostId":"b77b4e5e-1bb3-500f-8b27-cf6d11a375f7"}},
    "staticQueryHashes": ["2841359383","3257411868"]}