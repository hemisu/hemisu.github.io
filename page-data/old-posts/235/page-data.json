{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/old-posts/235/",
    "result": {"data":{"site":{"siteMetadata":{"title":"何米酥`s Blog"}},"markdownRemark":{"id":"30e976bb-041d-5d44-ac43-001b740f8e53","excerpt":"A gas station has to be built at such a location that the minimum distance between the station and any of the residential housing is as far away as possible…","html":"<p>A gas station has to be built at such a location that the minimum distance between the station and any of the residential housing is as far away as possible. However it must guarantee that all the houses are in its service range.</p>\n<p>Now given the map of the city and several candidate locations for the gas station, you are supposed to give the best recommendation. If there are more than one solution, output the one with the smallest average distance to all the houses. If such a solution is still not unique, output the one with the smallest index number.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 4 positive integers: N (&#x3C;= 103), the total number of houses; M (&#x3C;= 10), the total number of the candidate locations for the gas stations; K (&#x3C;= 104), the number of roads connecting the houses and the gas stations; and DS, the maximum service range of the gas station. It is hence assumed that all the houses are numbered from 1 to N, and all the candidate locations are numbered from G1 to GM.</p>\n<p>Then K lines follow, each describes a road in the format\nP1 P2 Dist\nwhere P1 and P2 are the two ends of a road which can be either house numbers or gas station numbers, and Dist is the integer length of the road.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in the first line the index number of the best location. In the next line, print the minimum and the average distances between the solution and all the houses. The numbers in a line must be separated by a space and be accurate up to 1 decimal place. If the solution does not exist, simply output “No Solution”.</p>\n<p>Sample Input 1:\n4 3 11 5\n1 2 2\n1 4 2\n1 G1 4\n1 G2 3\n2 3 2\n2 G2 1\n3 4 2\n3 G3 2\n4 G1 3\nG2 G1 1\nG3 G2 2\nSample Output 1:\nG1\n2.0 3.3\nSample Input 2:\n2 1 2 10\n1 G1 9\n2 G1 20\nSample Output 2:\nNo Solution</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include \"stdio.h\"\n    #include \"math.h\"\n    #include \"string.h\"\n    #include \"iostream\"\n    //#include \"stdlib.h\"\n    #include \"vector\"\n    #include \"set\"\n    #include \"map\"\n    //#include \"stack\"\n    #include \"queue\"\n    #include \"algorithm\"\n    using namespace std;\n    \n    const int MAXV = 1020;//最大顶点数\n    const int INF = 1000000000;//无穷大\n    \n    //n为顶点数，m为加油站数，k为边数，DS为服务范围，G为邻接矩阵\n    //d[]记录最短距离\n    int n, m, k, DS, G[MAXV][MAXV];\n    int d[MAXV];\n    bool vis[MAXV] = {false};\n    \n    //Dijkstra算法求所有顶点到起点s的最短距离\n    void Dijkstra(int s){\n        memset(vis, false, sizeof(vis));\n        fill(d, d + MAXV, INF);\n        d[s] = 0;\n        for (int i = 0; i &lt; n + m; i++) {\n            int u = -1, MIN = INF;\n            for (int j = 1; j &lt;= n + m; j++) {\n                if (vis[j] == false &amp;&amp; d[j] &lt; MIN) {\n                    u = j;\n                    MIN = d[j];\n                }\n            }\n            if (u == -1) return;\n            vis[u] = true;\n            for (int v = 1; v &lt;= n + m; v++) {\n                if (vis[v] == false &amp;&amp; G[u][v] != INF) {\n                    if (d[u] + G[u][v] &lt; d[v]) {\n                        d[v] = d[u] + G[u][v];//覆盖d[v]\n                    }\n                }\n            }\n        }\n    }\n    //将str[]转换为数字，若str是数字，则返回本身；否则返回去掉G之后的数加上n\n    int getID(char str[]){\n        int i = 0, len = strlen(str), ID = 0;\n        while (i &lt; len) {\n            if (str[i] != 'G') {\n                ID = ID * 10 + (str[i] - '0');\n            }\n            i++;\n        }\n        if (str[0] == 'G') {\n            return ID + n;\n        }else{\n            return ID;\n        }\n    }\n    \n    int main(){\n        scanf(\"%d%d%d%d\", &amp;n, &amp;m, &amp;k, &amp;DS);\n        int u, v, w;\n        char city1[5], city2[5];\n        fill(G[0], G[0] + MAXV * MAXV, INF);\n        for (int i = 0; i &lt; k; i++) {\n            scanf(\"%s %s %d\", city1, city2, &amp;w);\n            u = getID(city1);\n            v = getID(city2);\n            G[u][v] = G[v][u] = w;//边权\n        }\n        //ansDis存放最大的最短距离\n        //ansAvg存放最小平均距离，ansID存放最终加油站ID\n        double ansDis = -1, ansAvg = INF;\n        int ansID = -1;\n        for (int i = n + 1; i &lt;= n + m; i++) {//枚举所有加油站\n            double minDis = INF, avg = 0;//minDis为最大的最近距离，avg为平均距离\n            Dijkstra(i);//求出d数组\n            for (int j = 1; j &lt;= n; j++) {//枚举所有民房，求出minDis与avg\n                if (d[j] > DS) {//存在距离大于DS的居民房，跳出\n                    minDis = -1;\n                    break;\n                }\n                if (d[j] &lt; minDis) minDis = d[j];\n                avg += 1.0 * d[j] / n;//获取平均距离\n            }\n            if (minDis == -1) continue;//跳过这个加油站\n            if (minDis > ansDis) {//最大距离\n                ansDis = minDis;\n                ansID = i;\n                ansAvg = avg;\n            }else if (minDis == ansDis &amp;&amp; avg &lt; ansAvg){//更新最小平均距离\n                ansID = i;\n                ansAvg = avg;\n            }\n        }\n        if (ansID == -1) printf(\"No Solution\\n\");//无解\n        else{\n            printf(\"G%d\\n\", ansID - n);\n            printf(\"%.1f %.1f\\n\", ansDis, ansAvg);\n        }\n        return 0;\n    }</code></pre></div>","tableOfContents":"","frontmatter":{"title":"PAT A1072","date":"February 26, 2017","description":null}},"previous":{"fields":{"slug":"/old-posts/233/"},"frontmatter":{"title":"PAT A1030"}},"next":{"fields":{"slug":"/old-posts/237/"},"frontmatter":{"title":"PAT A1087"}}},"pageContext":{"id":"30e976bb-041d-5d44-ac43-001b740f8e53","previousPostId":"7167a94f-3bc7-5193-81f0-931a78a2f452","nextPostId":"1299150c-7883-54d3-aaba-552145566b40"}},
    "staticQueryHashes": ["2841359383","3257411868"]}